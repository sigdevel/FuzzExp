$flavour = shift;
if ($flavour =~ /64/) {
$SIZE_T	=8;
$LRSAVE	=2*$SIZE_T;
$STU	="stdu";
$POP	="ld";
$PUSH	="std";
$UCMP	="cmpld";
} elsif ($flavour =~ /32/) {
$SIZE_T	=4;
$LRSAVE	=$SIZE_T;
$STU	="stwu";
$POP	="lwz";
$PUSH	="stw";
$UCMP	="cmplw";
} else { die "nonsense $flavour"; }
$sp="r1";
$0 =~ m/(.*[\/\\])[^\/\\]+$/; $dir=$1;
( $xlate="${dir}ppc-xlate.pl" and -f $xlate ) or
( $xlate="${dir}../../perlasm/ppc-xlate.pl" and -f $xlate) or
die "can't locate ppc-xlate.pl";
open STDOUT,"| $^X $xlate $flavour ".shift || die "can't call $xlate: $!";
$code.=<<___;
.machine	"any"
.text
_vpaes_consts:
.long	0x01020300, 0x05060704, 0x090a0b08, 0x0d0e0f0c	?inv
.long	0x05060704, 0x090a0b08, 0x0d0e0f0c, 0x01020300	?inv
.long	0x090a0b08, 0x0d0e0f0c, 0x01020300, 0x05060704	?inv
.long	0x0d0e0f0c, 0x01020300, 0x05060704, 0x090a0b08	?inv
.long	0x03000102, 0x07040506, 0x0b08090a, 0x0f0c0d0e	?inv
.long	0x0f0c0d0e, 0x03000102, 0x07040506, 0x0b08090a	?inv
.long	0x0b08090a, 0x0f0c0d0e, 0x03000102, 0x07040506	?inv
.long	0x07040506, 0x0b08090a, 0x0f0c0d0e, 0x03000102	?inv
.long	0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f	?inv
.long	0x00050a0f, 0x04090e03, 0x080d0207, 0x0c01060b	?inv
.long	0x0009020b, 0x040d060f, 0x08010a03, 0x0c050e07	?inv
.long	0x000d0a07, 0x04010e0b, 0x0805020f, 0x0c090603	?inv
.long	0xf001080d, 0x0f06050e, 0x020c0b0a, 0x09030704	?rev
.long	0xf0070b0f, 0x060a0401, 0x09080502, 0x0c0e0d03	?rev
.long	0x00702a5a, 0x98e8b2c2, 0x08782252, 0x90e0baca	?rev
.long	0x004d7c31, 0x7d30014c, 0x81ccfdb0, 0xfcb180cd	?rev
.long	0x00c7bd6f, 0x176dd2d0, 0x78a802c5, 0x7abfaa15	?rev
.long	0x006abb5f, 0xa574e4cf, 0xfa352b41, 0xd1901e8e	?rev
.long	0x0023e2fa, 0x15d41836, 0xefd92e0d, 0xc1ccf73b	?rev
.long	0x003e50cb, 0x8fe19bb1, 0x44f52a14, 0x6e7adfa5	?rev
.long	0x0029e10a, 0x4088eb69, 0x4a2382ab, 0xc863a1c2	?rev
.long	0x0024710b, 0xc6937ae2, 0xcd2f98bc, 0x55e9b75e	?rev
.long	0x005f540b, 0x045b500f, 0x1a454e11, 0x1e414a15	?rev
.long	0x00650560, 0xe683e386, 0x94f191f4, 0x72177712	?rev
.long	0x0040f97e, 0x53ea8713, 0x2d3e94d4, 0xb96daac7	?rev
.long	0x001d4493, 0x0f56d712, 0x9c8ec5d8, 0x59814bca	?rev
.long	0x00d6869a, 0x53031c85, 0xc94c994f, 0x501fd5ca	?rev
.long	0x0049d7ec, 0x89173bc0, 0x65a5fbb2, 0x9e2c5e72	?rev
.long	0x00a2b1e6, 0xdfcc577d, 0x39442a88, 0x139b6ef5	?rev
.long	0x00cbc624, 0xf7fae23c, 0xd3efde15, 0x0d183129	?rev
.long	0x0042b496, 0x926422d0, 0x04d4f2b0, 0xf6462660	?rev
.long	0x006759cd, 0xa69894c1, 0x6baa5532, 0x3e0cfff3	?rev
.long	0x00d0d426, 0x9692f246, 0xb0f6b464, 0x04604222	?rev
.long	0x00c1aaff, 0xcda6550c, 0x323e5998, 0x6bf36794	?rev
.long	0x0047e4a3, 0x5d1ab9fe, 0xf9be1d5a, 0xa4e34007	?rev
.long	0x008336b5, 0xf477c241, 0x1e9d28ab, 0xea69dc5f	?rev
.long	0x00d55085, 0x1fca4f9a, 0x994cc91c, 0x8653d603	?rev
.long	0x004afcb6, 0xa7ed5b11, 0xc882347e, 0x6f2593d9	?rev
.long	0x00d6c91f, 0xca1c03d5, 0x86504f99, 0x4c9a8553	?rev
.long	0xe87bdc4f, 0x059631a2, 0x8714b320, 0x6af95ecd	?rev
.long	0x00a7d97e, 0xc86f11b6, 0xfc5b2582, 0x3493ed4a	?rev
.long	0x00331427, 0x62517645, 0xcefddae9, 0xac9fb88b	?rev
.long	0xb6ee9daf, 0xb991831f, 0x817d7c4d, 0x08982a70	?asis
Lk_s63:
.long	0x5b5b5b5b, 0x5b5b5b5b, 0x5b5b5b5b, 0x5b5b5b5b	?asis
.long	0x0060b6d6, 0x29499fff, 0x0868bede, 0x214197f7	?rev
.long	0x00ecbc50, 0x51bded01, 0xe00c5cb0, 0xb15d0de1	?rev
.long	0x00e3a447, 0x40a3e407, 0x1af9be5d, 0x5ab9fe1d	?rev
.long	0x0069ea83, 0xdcb5365f, 0x771e9df4, 0xabc24128	?rev
.align	5
Lconsts:
mflr	r0
bcl	20,31,\$+4
addi	r12,r12,-0x308
mtlr	r0
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.asciz  "Vector Permutation AES for AltiVec, Mike Hamburg (Stanford University)"
.align	6
___
my ($inptail,$inpperm,$outhead,$outperm,$outmask,$keyperm) = map("v$_",(26..31));
{
my ($inp,$out,$key) = map("r$_",(3..5));
my ($invlo,$invhi,$iptlo,$ipthi,$sbou,$sbot) = map("v$_",(10..15));
my ($sb1u,$sb1t,$sb2u,$sb2t) = map("v$_",(16..19));
my ($sb9u,$sb9t,$sbdu,$sbdt,$sbbu,$sbbt,$sbeu,$sbet)=map("v$_",(16..23));
$code.=<<___;
.align	4
_vpaes_encrypt_preheat:
mflr	r8
bl	Lconsts
mtlr	r8
li	r10, 0xd0
li	r8,  0xf0
lvx	$invlo, r12, r11
li	r11, 0x100
lvx	$invhi, r12, r10
li	r10, 0x110
lvx	$iptlo, r12, r9
li	r9,  0x120
lvx	$ipthi, r12, r8
li	r8,  0x130
lvx	$sbou, r12, r11
li	r11, 0x140
lvx	$sbot, r12, r10
li	r10, 0x150
lvx	$sb1u, r12, r9
lvx	$sb1t, r12, r8
lvx	$sb2u, r12, r11
lvx	$sb2t, r12, r10
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.align 5
_vpaes_encrypt_core:
li	r9, 16
li	r11, 0x10
lvx	v6, r9, $key
addi	r9, r9, 16
addi	r10, r11, 0x40
mtctr	r8
b	Lenc_entry
.align 4
Lenc_loop:
addi	r11, r11, 16
addi	r10, r11, 0x40
Lenc_entry:
vand	v0, v0, v9
vmr	v5, v6
addi	r9, r9, 16
bdnz	Lenc_loop
addi	r10, r11, 0x80
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.globl	.vpaes_encrypt
.align	5
.vpaes_encrypt:
$STU	$sp,-$FRAME($sp)
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
mflr	r6
stvx	v20,r10,$sp
addi	r10,r10,32
stvx	v21,r11,$sp
addi	r11,r11,32
stvx	v22,r10,$sp
addi	r10,r10,32
stvx	v23,r11,$sp
addi	r11,r11,32
stvx	v24,r10,$sp
addi	r10,r10,32
stvx	v25,r11,$sp
addi	r11,r11,32
stvx	v26,r10,$sp
addi	r10,r10,32
stvx	v27,r11,$sp
addi	r11,r11,32
stvx	v28,r10,$sp
addi	r10,r10,32
stvx	v29,r11,$sp
addi	r11,r11,32
stvx	v30,r10,$sp
stvx	v31,r11,$sp
li	r0, -1
$PUSH	r6,`$FRAME+$LRSAVE`($sp)
bl	_vpaes_encrypt_preheat
lvx	v0, 0, $inp
?lvsr	$outperm, 0, $out
?vperm	v0, v0, $inptail, $inpperm
bl	_vpaes_encrypt_core
andi.	r8, $out, 15
li	r9, 16
beq	Lenc_out_aligned
mtctr	r9
Lenc_out_unaligned:
stvebx	v0, 0, $out
addi	$out, $out, 1
bdnz	Lenc_out_unaligned
b	Lenc_done
.align	4
Lenc_out_aligned:
stvx	v0, 0, $out
Lenc_done:
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
mtlr	r6
lvx	v20,r10,$sp
addi	r10,r10,32
lvx	v21,r11,$sp
addi	r11,r11,32
lvx	v22,r10,$sp
addi	r10,r10,32
lvx	v23,r11,$sp
addi	r11,r11,32
lvx	v24,r10,$sp
addi	r10,r10,32
lvx	v25,r11,$sp
addi	r11,r11,32
lvx	v26,r10,$sp
addi	r10,r10,32
lvx	v27,r11,$sp
addi	r11,r11,32
lvx	v28,r10,$sp
addi	r10,r10,32
lvx	v29,r11,$sp
addi	r11,r11,32
lvx	v30,r10,$sp
lvx	v31,r11,$sp
addi	$sp,$sp,$FRAME
blr
.long	0
.byte	0,12,0x04,1,0x80,0,3,0
.long	0
.size	.vpaes_encrypt,.-.vpaes_encrypt
.align	4
_vpaes_decrypt_preheat:
mflr	r8
bl	Lconsts
mtlr	r8
li	r10, 0xd0
li	r8,  0x170
lvx	$invlo, r12, r11
li	r11, 0x180
lvx	$invhi, r12, r10
li	r10, 0x190
lvx	$iptlo, r12, r9
li	r9,  0x1a0
lvx	$ipthi, r12, r8
li	r8,  0x1b0
lvx	$sbou, r12, r11
li	r11, 0x1c0
lvx	$sbot, r12, r10
li	r10, 0x1d0
lvx	$sb9u, r12, r9
li	r9,  0x1e0
lvx	$sb9t, r12, r8
li	r8,  0x1f0
lvx	$sbdu, r12, r11
li	r11, 0x200
lvx	$sbdt, r12, r10
li	r10, 0x210
lvx	$sbbu, r12, r9
lvx	$sbbt, r12, r8
lvx	$sbeu, r12, r11
lvx	$sbet, r12, r10
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.align	4
_vpaes_decrypt_core:
li	r9, 16
li	r11, 0x30
lvx	v6, r9, $key
addi	r9, r9, 16
mtctr	r8
b	Ldec_entry
.align 4
Ldec_loop:
subi	r11, r11, 16
andi.	r11, r11, 0x30
Ldec_entry:
vand	v0, v0, v9
vmr	v5, v6
addi	r9, r9, 16
bdnz	Ldec_loop
addi	r10, r11, 0x80
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.globl	.vpaes_decrypt
.align	5
.vpaes_decrypt:
$STU	$sp,-$FRAME($sp)
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
mflr	r6
stvx	v20,r10,$sp
addi	r10,r10,32
stvx	v21,r11,$sp
addi	r11,r11,32
stvx	v22,r10,$sp
addi	r10,r10,32
stvx	v23,r11,$sp
addi	r11,r11,32
stvx	v24,r10,$sp
addi	r10,r10,32
stvx	v25,r11,$sp
addi	r11,r11,32
stvx	v26,r10,$sp
addi	r10,r10,32
stvx	v27,r11,$sp
addi	r11,r11,32
stvx	v28,r10,$sp
addi	r10,r10,32
stvx	v29,r11,$sp
addi	r11,r11,32
stvx	v30,r10,$sp
stvx	v31,r11,$sp
li	r0, -1
$PUSH	r6,`$FRAME+$LRSAVE`($sp)
bl	_vpaes_decrypt_preheat
lvx	v0, 0, $inp
?lvsr	$outperm, 0, $out
?lvsl	$keyperm, 0, $key
?vperm	v0, v0, $inptail, $inpperm
bl	_vpaes_decrypt_core
andi.	r8, $out, 15
li	r9, 16
beq	Ldec_out_aligned
mtctr	r9
Ldec_out_unaligned:
stvebx	v0, 0, $out
addi	$out, $out, 1
bdnz	Ldec_out_unaligned
b	Ldec_done
.align	4
Ldec_out_aligned:
stvx	v0, 0, $out
Ldec_done:
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
mtlr	r6
lvx	v20,r10,$sp
addi	r10,r10,32
lvx	v21,r11,$sp
addi	r11,r11,32
lvx	v22,r10,$sp
addi	r10,r10,32
lvx	v23,r11,$sp
addi	r11,r11,32
lvx	v24,r10,$sp
addi	r10,r10,32
lvx	v25,r11,$sp
addi	r11,r11,32
lvx	v26,r10,$sp
addi	r10,r10,32
lvx	v27,r11,$sp
addi	r11,r11,32
lvx	v28,r10,$sp
addi	r10,r10,32
lvx	v29,r11,$sp
addi	r11,r11,32
lvx	v30,r10,$sp
lvx	v31,r11,$sp
addi	$sp,$sp,$FRAME
blr
.long	0
.byte	0,12,0x04,1,0x80,0,3,0
.long	0
.size	.vpaes_decrypt,.-.vpaes_decrypt
.globl	.vpaes_cbc_encrypt
.align	5
.vpaes_cbc_encrypt:
${UCMP}i r5,16
bltlr-
$STU	$sp,-`($FRAME+2*$SIZE_T)`($sp)
mflr	r0
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
mfspr	r12, 256
stvx	v20,r10,$sp
addi	r10,r10,32
stvx	v21,r11,$sp
addi	r11,r11,32
stvx	v22,r10,$sp
addi	r10,r10,32
stvx	v23,r11,$sp
addi	r11,r11,32
stvx	v24,r10,$sp
addi	r10,r10,32
stvx	v25,r11,$sp
addi	r11,r11,32
stvx	v26,r10,$sp
addi	r10,r10,32
stvx	v27,r11,$sp
addi	r11,r11,32
stvx	v28,r10,$sp
addi	r10,r10,32
stvx	v29,r11,$sp
addi	r11,r11,32
stvx	v30,r10,$sp
stvx	v31,r11,$sp
$PUSH	r30,`$FRAME+$SIZE_T*0`($sp)
$PUSH	r31,`$FRAME+$SIZE_T*1`($sp)
li	r9, -16
$PUSH	r0, `$FRAME+$SIZE_T*2+$LRSAVE`($sp)
li	r6, -1
li	r9, 15
?lvsl	$inpperm, 0, r31
lvx	v25, r9, r31
?vperm	v24, v24, v25, $inpperm
vxor	v7, v7, v7
?lvsl	$keyperm, 0, $key
?lvsr	$outperm, 0, $out
lvx	$inptail, 0, $inp
?vperm	$outmask, v7, $outmask, $outperm
beq	Lcbc_decrypt
bl	_vpaes_encrypt_preheat
li	r0, 16
vmr	v0, $inptail
lvx	$inptail, 0, $inp
addi	$inp, $inp, 16
?vperm	v0, v0, $inptail, $inpperm
bl	_vpaes_encrypt_core
andi.	r8, $out, 15
sub	r9, $out, r8
Lcbc_enc_head:
stvebx	$outhead, r8, r9
cmpwi	r8, 15
addi	r8, r8, 1
bne	Lcbc_enc_head
addi	$out, $out, 16
beq	Lcbc_unaligned_done
Lcbc_enc_loop:
vmr	v0, $inptail
lvx	$inptail, 0, $inp
addi	$inp, $inp, 16
?vperm	v0, v0, $inptail, $inpperm
bl	_vpaes_encrypt_core
vsel	v1, $outhead, v0, $outmask
vmr	$outhead, v0
stvx	v1, 0, $out
addi	$out, $out, 16
bne	Lcbc_enc_loop
b	Lcbc_done
.align	5
Lcbc_decrypt:
bl	_vpaes_decrypt_preheat
li	r0, 16
vmr	v0, $inptail
lvx	$inptail, 0, $inp
addi	$inp, $inp, 16
?vperm	v0, v0, $inptail, $inpperm
bl	_vpaes_decrypt_core
andi.	r8, $out, 15
vmr	v24, v25
sub	r9, $out, r8
Lcbc_dec_head:
stvebx	$outhead, r8, r9
cmpwi	r8, 15
addi	r8, r8, 1
bne	Lcbc_dec_head
addi	$out, $out, 16
beq	Lcbc_unaligned_done
Lcbc_dec_loop:
vmr	v0, $inptail
lvx	$inptail, 0, $inp
addi	$inp, $inp, 16
?vperm	v0, v0, $inptail, $inpperm
bl	_vpaes_decrypt_core
vmr	v24, v25
vsel	v1, $outhead, v0, $outmask
vmr	$outhead, v0
stvx	v1, 0, $out
addi	$out, $out, 16
bne	Lcbc_dec_loop
Lcbc_done:
Lcbc_unaligned_done:
andi.	r8, $out, 15
sub	$out, $out, r8
li	r9, 0
Lcbc_tail:
stvebx	$outhead, r9, $out
addi	r9, r9, 1
cmpw	r9, r8
bne	Lcbc_tail
Lcbc_write_iv:
li	r10, 4
?lvsl	$outperm, 0, r8
li	r11, 8
li	r12, 12
stvewx	v24, r10, r31
stvewx	v24, r11, r31
stvewx	v24, r12, r31
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
lvx	v20,r10,$sp
addi	r10,r10,32
lvx	v21,r11,$sp
addi	r11,r11,32
lvx	v22,r10,$sp
addi	r10,r10,32
lvx	v23,r11,$sp
addi	r11,r11,32
lvx	v24,r10,$sp
addi	r10,r10,32
lvx	v25,r11,$sp
addi	r11,r11,32
lvx	v26,r10,$sp
addi	r10,r10,32
lvx	v27,r11,$sp
addi	r11,r11,32
lvx	v28,r10,$sp
addi	r10,r10,32
lvx	v29,r11,$sp
addi	r11,r11,32
lvx	v30,r10,$sp
lvx	v31,r11,$sp
Lcbc_abort:
$POP	r0, `$FRAME+$SIZE_T*2+$LRSAVE`($sp)
$POP	r30,`$FRAME+$SIZE_T*0`($sp)
$POP	r31,`$FRAME+$SIZE_T*1`($sp)
mtlr	r0
addi	$sp,$sp,`$FRAME+$SIZE_T*2`
blr
.long	0
.byte	0,12,0x04,1,0x80,2,6,0
.long	0
.size	.vpaes_cbc_encrypt,.-.vpaes_cbc_encrypt
___
}
{
my ($inp,$bits,$out)=map("r$_",(3..5));
my $dir="cr1";
my ($invlo,$invhi,$iptlo,$ipthi,$rcon) = map("v$_",(10..13,24));
$code.=<<___;
.align	4
_vpaes_key_preheat:
mflr	r8
bl	Lconsts
mtlr	r8
li	r10, 0xd0
li	r8,  0xf0
li	r11, 0x120
lvx	$invhi, r12, r10
li	r10, 0x130
li	r9, 0x220
lvx	$ipthi, r12, r8
li	r8, 0x230
li	r11, 0x240
lvx	v15, r12, r10
li	r10, 0x250
li	r9, 0x260
lvx	v17, r12, r8
li	r8, 0x270
li	r11, 0x280
lvx	v19, r12, r10
li	r10, 0x290
li	r9, 0x2a0
lvx	v21, r12, r8
li	r8, 0x2b0
lvx	v23, r12, r10
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.align	4
_vpaes_schedule_core:
mflr	r7
lvx	v0, 0, $inp
addi	$inp, $inp, 8
?vperm	v0, v0, v6, $inpperm
bl	_vpaes_schedule_transform
bne	$dir, Lschedule_am_decrypting
li	r9, 4
li	r10, 8
li	r11, 12
?vperm	$outmask, v9, $outmask, $outperm
stvewx	$outhead, r9, $out
stvewx	$outhead, r10, $out
stvewx	$outhead, r11, $out
b	Lschedule_go
Lschedule_am_decrypting:
li	r9, 4
li	r10, 8
li	r11, 12
?lvsl	$outperm, 0, r0
?vperm	$outmask, $outmask, v9, $outperm
stvewx	$outhead, r9, $out
stvewx	$outhead, r10, $out
stvewx	$outhead, r11, $out
Lschedule_go:
bgt	Lschedule_256
beq	Lschedule_192
Lschedule_128:
mtctr	r0
Loop_schedule_128:
bl 	_vpaes_schedule_round
b 	Loop_schedule_128
.align	4
Lschedule_192:
lvx	v0, 0, $inp
?vperm	v0, v6, v0, $inpperm
?vsldoi	v6, v0, v9, 8
mtctr	r0
Loop_schedule_192:
bl	_vpaes_schedule_round
bl	_vpaes_schedule_192_smear
bl	_vpaes_schedule_round
bl	_vpaes_schedule_192_smear
b	Loop_schedule_192
.align	4
Lschedule_256:
addi	$inp, $inp, 8
?vperm	v0, v6, v0, $inpperm
mtctr	r0
Loop_schedule_256:
bl	_vpaes_schedule_round
bl	_vpaes_schedule_mangle
bl	_vpaes_schedule_low_round
b	Loop_schedule_256
.align	4
Lschedule_mangle_last:
li	r9,  0x2f0
bne	$dir, Lschedule_mangle_last_dec
lvx	$ipthi, r9, r12
li	r10, 4
vsel	v2, $outhead, v0, $outmask
li	r11, 8
stvx	v2, 0, $out
li	r12, 12
stvewx	v0, r10, $out
stvewx	v0, r11, $out
stvewx	v0, r12, $out
b	Lschedule_mangle_done
.align	4
Lschedule_mangle_last_dec:
lvx	$ipthi, r9,  r12
li	r10, 4
vsel	v2, $outhead, v0, $outmask
li	r11, 8
stvx	v2, 0, $out
li	r12, 12
stvewx	v0, r10, r9
stvewx	v0, r11, r9
stvewx	v0, r12, r9
Lschedule_mangle_done:
mtlr	r7
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.align	4
_vpaes_schedule_192_smear:
?vspltw	v0, v7, 3
vmr	v0, v6
?vsldoi	v6, v6, v9, 8
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.align	4
_vpaes_schedule_round:
_vpaes_schedule_low_round:
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.align	4
_vpaes_schedule_transform:
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.align	4
_vpaes_schedule_mangle:
bne	$dir, Lschedule_mangle_dec
vsel	v2, $outhead, v1, $outmask
vmr	$outhead, v1
stvx	v2, 0, $out
blr
.align	4
Lschedule_mangle_dec:
vsel	v2, $outhead, v1, $outmask
vmr	$outhead, v1
stvx	v2, 0, $out
blr
.long	0
.byte	0,12,0x14,0,0,0,0,0
.globl	.vpaes_set_encrypt_key
.align	5
.vpaes_set_encrypt_key:
$STU	$sp,-$FRAME($sp)
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
mflr	r0
stvx	v20,r10,$sp
addi	r10,r10,32
stvx	v21,r11,$sp
addi	r11,r11,32
stvx	v22,r10,$sp
addi	r10,r10,32
stvx	v23,r11,$sp
addi	r11,r11,32
stvx	v24,r10,$sp
addi	r10,r10,32
stvx	v25,r11,$sp
addi	r11,r11,32
stvx	v26,r10,$sp
addi	r10,r10,32
stvx	v27,r11,$sp
addi	r11,r11,32
stvx	v28,r10,$sp
addi	r10,r10,32
stvx	v29,r11,$sp
addi	r11,r11,32
stvx	v30,r10,$sp
stvx	v31,r11,$sp
li	r7, -1
$PUSH	r0, `$FRAME+$LRSAVE`($sp)
bl	_vpaes_schedule_core
$POP	r0, `$FRAME+$LRSAVE`($sp)
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
mtlr	r0
xor	r3, r3, r3
lvx	v20,r10,$sp
addi	r10,r10,32
lvx	v21,r11,$sp
addi	r11,r11,32
lvx	v22,r10,$sp
addi	r10,r10,32
lvx	v23,r11,$sp
addi	r11,r11,32
lvx	v24,r10,$sp
addi	r10,r10,32
lvx	v25,r11,$sp
addi	r11,r11,32
lvx	v26,r10,$sp
addi	r10,r10,32
lvx	v27,r11,$sp
addi	r11,r11,32
lvx	v28,r10,$sp
addi	r10,r10,32
lvx	v29,r11,$sp
addi	r11,r11,32
lvx	v30,r10,$sp
lvx	v31,r11,$sp
addi	$sp,$sp,$FRAME
blr
.long	0
.byte	0,12,0x04,1,0x80,0,3,0
.long	0
.size	.vpaes_set_encrypt_key,.-.vpaes_set_encrypt_key
.globl	.vpaes_set_decrypt_key
.align	4
.vpaes_set_decrypt_key:
$STU	$sp,-$FRAME($sp)
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
mflr	r0
stvx	v20,r10,$sp
addi	r10,r10,32
stvx	v21,r11,$sp
addi	r11,r11,32
stvx	v22,r10,$sp
addi	r10,r10,32
stvx	v23,r11,$sp
addi	r11,r11,32
stvx	v24,r10,$sp
addi	r10,r10,32
stvx	v25,r11,$sp
addi	r11,r11,32
stvx	v26,r10,$sp
addi	r10,r10,32
stvx	v27,r11,$sp
addi	r11,r11,32
stvx	v28,r10,$sp
addi	r10,r10,32
stvx	v29,r11,$sp
addi	r11,r11,32
stvx	v30,r10,$sp
stvx	v31,r11,$sp
li	r7, -1
$PUSH	r0, `$FRAME+$LRSAVE`($sp)
bl	_vpaes_schedule_core
$POP	r0,  `$FRAME+$LRSAVE`($sp)
li	r10,`15+6*$SIZE_T`
li	r11,`31+6*$SIZE_T`
mtlr	r0
xor	r3, r3, r3
lvx	v20,r10,$sp
addi	r10,r10,32
lvx	v21,r11,$sp
addi	r11,r11,32
lvx	v22,r10,$sp
addi	r10,r10,32
lvx	v23,r11,$sp
addi	r11,r11,32
lvx	v24,r10,$sp
addi	r10,r10,32
lvx	v25,r11,$sp
addi	r11,r11,32
lvx	v26,r10,$sp
addi	r10,r10,32
lvx	v27,r11,$sp
addi	r11,r11,32
lvx	v28,r10,$sp
addi	r10,r10,32
lvx	v29,r11,$sp
addi	r11,r11,32
lvx	v30,r10,$sp
lvx	v31,r11,$sp
addi	$sp,$sp,$FRAME
blr
.long	0
.byte	0,12,0x04,1,0x80,0,3,0
.long	0
.size	.vpaes_set_decrypt_key,.-.vpaes_set_decrypt_key
___
}
my $consts=1;
foreach  (split("\n",$code)) {
s/\`([^\`]*)\`/eval $1/geo;
if ($consts && m/\.long\s+(.+)\s+(\?[a-z]*)$/o) {
my $conv=$2;
my @bytes=();
foreach (split(/,\s+/,$1)) {
my $l = /^0/?oct'	nt;
push @bytes,($l>>24)&0xff,($l>>16)&0xff,($l>>8)&0xff,$l&0xff;
}
if ($flavour =~ /le$/o) {
SWITCH: for($conv)  {
/\?inv/ && do   { @bytes=map($_^0xf,@bytes); last; };
/\?rev/ && do   { @bytes=reverse(@bytes);    last; };
}
}
print ".byte\t",join(',',map (sprintf("0x%02x",$_),@bytes)),"\n";
next;
}
s/\?lvsr/lvsl/o or
s/\?lvsl/lvsr/o or
s/\?(vperm\s+v[0-9]+,\s*)(v[0-9]+,\s*)(v[0-9]+,\s*)(v[0-9]+)/$1$3$2$4/o or
s/\?(vsldoi\s+v[0-9]+,\s*)(v[0-9]+,)\s*(v[0-9]+,\s*)([0-9]+)/$1$3$2 16-$4/o or
s/\?(vspltw\s+v[0-9]+,\s*)(v[0-9]+,)\s*([0-9])/$1$2 3-$3/o;
s/\?([a-z]+)/$1/o;
}
print $_,"\n";
}
close STDOUT;
