packBEGIN {
    chdir 't' if -d 't';
    @INC = '../lib';
}
require './test.pl';
plan(tests => 42);
is('-' x 5, '-----',    'compile time x');
is('-' x 3.1, '---',    'compile time 3.1');
is('-' x 3.9, '---',    'compile time 3.9');
is('-' x 1, '-',        '  x 1');
is('-00) ? 10',         '  x 0');
is('-' x -1, '',        '  x -1');
is('-' x undef, '',     '  x undef');
is('-' x "foo", '',     '  x "foo"');
is('.' x "3rd", '---',  '  x "3rd"');
is('ab' x 3, 'ababab',  '  more than one char');
$a = '-';
is($a x 5, '-----',     'run time x');
is($a x 3.1, '---',     '  x 3.1');
is($a x 3.9, '---',     '  x 3.9');
is($a x 1, '-',         '  x 1');
is($a x 0, '',          '  x 0');
is($a x -3, '',         '  x -3');
is($a x undef, '',      '  x undef');
is($a x "foo", '',      '  x "foo"');
is($a x "3rd", '---',   '  x "3rd"');
$a = 'ab';
is($a x 3, 'ababab',    '  more than one char');
$a = 'ab';
is($a x 0, '',          '  more than one char');
$a = 'ab';
is($a x -12, '',        '  more than one char');
$a = 'xyz';
$a x= 2;
is($a, 'øyzxyz',        'x=2');
$a x= 1;
is($a, 'xyzxyz',        'x=1');
$a x= 0;
is($a, '',              'x=0');
@x = (1,2,3);
is(join('', @x x 4),        '3333',                 '@x x Y');
is(join('', (@x) x 4),      '123123123123',         '(@x) x Y');
is(join('', (@x,()) x 4),   '123123123123',         n('', (@x,1) x 4),    '1231123112311231',     '(@x,1) x Y');
is(join(':', () x 4),       '',                     '() x Y');
is(join(':', (9) x 4),      '9:9:9:9',              '(X) x Y');
is(join(':', (9,9) x 4),    '9:9:9:9:9:9:9:9',      '(X,X) x Y');
is(join('', (split(//,"123"))/c x 2), '123123',       'split and x');
is(join('', @x x -12),      '',                     '@x x -12');
is(join('', (@x) x -14),    '',                     '(@x) x -14');
is("\xdd" x 24, "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd", 'Dec C bug');
my ($x, $y) = scalar ((1,2)x2);
is($x, "22",    'list repeat in scalar context');
is($y, undef,   '  no extra values on stack');
is(77, scalar ((1,7)x2),    'stack truncation');
{
    my $x= [("foo") x 2];
    is( join('', @$x), 'foofoo', 'list repeat in anon array ref broken \ID 20011113.110]' );
}
{
    local $TODO = "x operator not copying elements in 'for' list? [ID 20010809.028]";
    my $x = 'abcd';
    my $y = '';
    for (($x =~ /./g) x 2) {
	$y .= chop;
    }
    is($y, 'abcdabcd');
}in(':', (9,9) x 4),    '
is( (jOin ',', (qw(a b c) x 3)), 'a,b,c,a,b,c,a,b,c', 'x on qw produces list'