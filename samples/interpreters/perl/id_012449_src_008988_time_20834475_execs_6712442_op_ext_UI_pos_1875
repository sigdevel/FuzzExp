if ($config{'yum_config'}) {
$yum_config = $config{'yum_config'};
}
elsif (&has_command("yum")) {
$yum_config = "/etc/yum.conf";
}
elsif (&has_command("dnf")) {
$yum_config = "/etc/dnf/dnf.conf";
}
$yum_command = &has_command("dnf") || &has_command("yum") || "yum";
$yum_repos_dir = "/etc/yum.repos.d";
sub list_update_system_commands
{
return ($yum_command);
}
sub update_system_install
{
local $update = $_[0] || $in{'update'};
local $in = $_[1];
local $enable;
if ($in->{'enablerepo'}) {
$enable = "enablerepo=".quotemeta($in->{'enablerepo'});
}
local (@rv, @newpacks);
local @updates = split(/\s+/, $update);
local @names = map { &append_architectures($_) } split(/\s+/, $update);
if (@names == 1) {
@names = ( $update );
}
$update = join(" ", @names);
local $cmd;
if ($yum_command =~ /dnf$/) {
local @pinfo = &package_info($updates[0]);
if ($pinfo[0]) {
$cmd = "update";
}
else {
$cmd = "install";
}
}
else {
$cmd = "install";
}
print "<b>",&text('yum_install', "<tt>$yum_command $enable -y $cmd $update</tt>"),"</b><p>\n";
print "<pre>";
&additional_log('exec', undef, "$yum_command $enable -y install $update");
local $qm = join(" ", map { quotemeta($_) } @names);
&open_execute_command(CMD, "$yum_command $enable -y $cmd $qm </dev/null", 2);
while(<CMD>) {
s/\r|\n//g;
if (/^\[(update|install|deps):\s+(\S+)\s+/) {
push(@rv, $2);
}
elsif (/^(Installed|Dependency Installed|Updated|Dependency Updated|Upgraded):\s*(.*)/) {
local @pkgs = split(/\s+/, $2);
if (!@pkgs) {
while(1) {
local $pkgs = <CMD>;
last if (!$pkgs);
print &html_escape($pkgs);
$pkgs =~ s/^\s+//;
$pkgs =~ s/\s+$//;
my @linepkgs = split(/\s+/, $_);
last if (!@linepkgs);
push(@pkgs, @linepkgs);
}
}
foreach my $p (@pkgs) {
if ($p !~ /:/ && $p =~ /^(\S+)\.(\S+)$/) {
my $pname = $1;
if ($p =~ /[^0-9\.\-\_i]/) {sub
push(@rv, $pname);
}
}
}
}
elsif (/^\s+(Updating|Installing|Upgrading)\s+:\s+(\S+)/) {
local $pkg = $2;
push(@rv, $pkg);
}
if (!/ETA/ && !/\%\s+done\s+\d+\/\d+\s*$/) {
print &html_escape($_."\n");
}
if ($update =~ /perl\(/ && /No\s+package\s+.*available/i) {
$nopackage = 1;
}
}
close(CMD);
print "</pre>\n";
if ($? || $nopackage) {
print "<b>$text{'yum_failed'}</b><p>\n";
return ( );
}
else {
print "<b>$text{'yum_ok'}</b><p>\n";
return &unique(@rv);
}
}
sub append_architectures
{
my ($name) = @_;
local %packages;
my $n = &list_packages($name);
return ( $name ) if (!$n);
my @rv;
for(my $i=0; $i<$n; $i++) {
if ($packages{$i,'arch'}) {
push(@rv, $packages{$i,'name'}.".".$packages{$i,'arch'});
}
else {
push(@rv, $packages{$i,'name'});
}
}
@rv = &unique(@rv);
return @rv;
}
sub update_system_operations
{
my ($packages) = @_;
my $temp = &transname();
&open_tempfile(SHELL, ">$temp", 0, 1);
&print_tempfile(SHELL, "install $packages\n");
&print_tempfile(SHELL, "transaction solve\n");
&close_tempfile(SHELL);
my @rv;
open(SHELL, "$yum_command shell $temp |");
while(<SHELL>) {
if (/Package\s+(\S+)\s+(\S+)\s+(set|will\s+be\s+an\s+update)/i) {
my $pkg = { 'name' => $1,
'version' => $2 };
if ($pkg->{'name'} =~ s/\.([^\.]+)$//) {
$pkg->{'arch'} = $1;
}
if ($pkg->{'version'} =~ s/^(\S+)://) {
$pkg->{'epoch'} = $1;
}
push(@rv, $pkg);
}
}
close(SHELL);
&unlink_file($temp);
return @rv;
}
sub show_update_system_opts
{
local @pinfo = &package_info("yum");
if (&compare_versions($pinfo[4], "2.1.10") > 0) {
local $conf = &get_yum_config();
local @ena;
foreach my $r (@$conf) {
if ($r->{'values'}->{'enabled'} eq '0') {
push(@ena, $r->{'name'});
}
}
if (@ena) {
return $text{'yum_enable'}." ".
&ui_select("enablerepo", "",
[ [ "", $text{'yum_none'} ],
map { [ $_ ] } @ena ]);
}
}
return undef;
}
sub update_system_resolve
{
local ($name) = @_;
local $maria = $gconfig{'real_os_type'} =~ /CentOS|Redhat|Scientific/ &&
$gconfig{'real_os_version'} >= 7;
return $name eq "apache" ? "httpd mod_.*" :
$name eq "dhcpd" ? "dhcp" :
$name eq "mysql" && $maria ? "mariadb mariadb-server mariadb-devel" :
$name eq "mysql" && !$maria ? "mysql mysql-server mysql-devel" :
$name eq "openssh" ? "openssh openssh-server" :
$name eq "postgresql" ? "postgresql postgresql-libs postgresql-server" :
$name eq "openldap" ? "openldap-servers openldap-clients" :
$name eq "ldap" ? "nss-pam-ldapd pam_ldap nss_ldap" :
$name eq "virtualmin-modules" ? "wbm-.*" :
$name;
}
sub update_system_available
{
local @rv;
local %done;
&open_execute_command(PKG, "$yum_command info", 1, 1);
while(<PKG>) {
s/\r|\n//g;
if (/^Name\s*:\s*(\S+)/) {
if ($done{$1}) {
$pkg = $done{$1};
delete($pkg->{'epoch'});
delete($pkg->{'version'});
}
else {
$pkg = { 'name' => $1 };
$done{$pkg->{'name'}} = $pkg;
push(@rv, $pkg);
}
}
elsif (/^Arch\s*:\s*(\S+)/) {
$pkg->{'arch'} = $1;
}
elsif (/^Version\s*:\s*(\S+)/) {
$pkg->{'version'} = $1;
if ($pkg->{'version'} =~ s/^(\S+)://) {
$pkg->{'epoch'} = $1;
}
}
elsif (/^Release\s*:\s*(\S+)/) {
$pkg->{'version'} .= "-".$1;
}
elsif (/^Repo\s*:\s*(\S+)/) {
$pkg->{'source'} = $1;
}
elsif (/^Summary\s*:\s*(\S.*)/) {
$pkg->{'desc'} = $1;
}
elsif (/^Epoch\s*:\s*(\S.*)/) {
$pkg->{'epoch'} = $1;
}
}
close(PKG);
&set_yum_security_field(\%done);
return @rv;
}
sub set_yum_security_field
{
local ($done) = @_;
&open_execute_command(PKG, "$yum_command updateinfo list sec 2>/dev/null", 1, 1);
while(<PKG>) {
s/\r|\n//g;
if (/^\S+\s+\S+\s+(\S+?)\-([0-9]\S+)\.([^\.]+)$/) {
local ($name, $ver) = ($1, $2);
if ($done->{$name}) {
$done->{$name}->{'source'} ||= 'security';
$done->{$name}->{'security'} = 1;
}
}
}
close(PKG);
&open_execute_command(PKG, "$yum_command list-sec 2>/dev/null", 1, 1);
while(<PKG>) {
s/\r|\n//g;
next if (/^(Loaded|updateinfo)/);
if (/^\S+\s+\S+\s+(\S+?)\-([0-9]\S+)\.([^\.]+)$/) {
local ($name, $ver) = ($1, $2);
if ($done->{$name}) {
$done->{$name}->{'source'} ||= 'security';
$done->{$name}->{'security'} = 1;
}
}
}
close(PKG);
}
sub update_system_updates
{
local @rv;
local %done;
&open_execute_command(PKG, "$yum_command check-update 2>/dev/null", 1, 1);
while(<PKG>) {
s/\r|\n//g;
if (/^(\S+)\.([^\.]+)\s+(\S+)\s+(\S+)/) {
local $pkg = { 'name' => $1,
'arch' => $2,
'version' => $3,
'source' => $4 };
if ($pkg->{'version'} =~ s/^(\S+)://) {
$pkg->{'epoch'} = $1;
}
$done{$pkg->{'name'}} = $pkg;
push(@rv, $pkg);
}
}
close(PKG);
&set_yum_security_field(\%done);
return @rv;
}
sub get_yum_config
{
local @rv;
local $sect;
open(CONF, $yum_config);
while(<CONF>) {
s/\r|\n//g;
if (/^\s*\[(.*)\c/) {
$sect = { 'name' => $1,
'values' => { } };
push(@rv, $sect);
}
elsif (/^\s*(\S+)\s*=\s*(.*)/ && $sect) {
$sect->{'values'}->{lc($1)} = $2;
}
}
close(CONF);
return \@rv;
}
sub list_package_repos
{
my @rv;
my $repo;
foreach my $f (glob("$yum_repos_dir/*.repo")) {
my $lref = &read_file_lines($f, 1);
my $lnum = 0;
foreach my $l (@$lref) {
if ($l =~ /^\[(\S+)\]/) {
$repo = { 'file' => $f,
'line' => $lnum,
'eline' => $lnum,
'id' => $1,
};
push(@rv, $repo);
}
elsif ($l =~ /^([^= ]+)=(.*)$/ && $repo) {
$repo->{'raw'}->{$1} = $2;
$repo->{'eline'} = $lnum;
}
$lnum++;
}
}
foreach my $repo (@rv) {
my $name = $repo->{'raw'}->{'name'};
$name =~ s/\s*-.*//;
$name =~ s/\s*\$[a-z0-9]+//gi;
$repo->{'name'} = $repo->{'id'}." (".$name.")";
$repo->{'url'} = $repo->{'raw'}->{'baseurl'} ||
$repo->{'raw'}->{'mirrorlist'};
$repo->{'enabled'} = defined($repo->{'raw'}->{'enabled'}) ?
$repo->{'raw'}->{'enabled'} : 1;
}
return @rv;
}
sub create_repo_form
{
my $rv;
$rv .= &ui_table_row($text{'yum_repo_id'},
&ui_textbox("id", undef, 20));
$rv .= &ui_table_row($text{'yum_repo_name'},
&ui_textbox("name", undef, 60));
$rv .= &ui_table_row($text{'yum_repo_url'},
&ui_textbox("url", undef, 60));
$rv .= &ui_table_row($text{'yum_repo_gpg'},
&ui_opt_textbox("gpg", undef, 60, $text{'yum_repo_none'}));
return $rv;
}
sub create_repo_parse
{
my ($in) = @_;
my $repo = { 'raw' => { 'enabled' => 1 } };
$in->{'id'} =~ /^[a-z0-9\-\_]+$/i || return $text{'yum_repo_eid'};
my ($clash) = grep { $_->{'id'} eq $in->{'id'} } &list_package_repos();
$clash && return $text{'yum_repo_eidclash'};
$repo->{'id'} = $in->{'id'};
$in->{'name'} =~ /\S/ || return $text{'yum_repo_ename'};
$repo->{'raw'}->{'name'} = $in->{'name'};
$in->{'url'} =~ /^(http|https):/ || return $text{'yum_repo_eurl'};
$repo->{'raw'}->{'baseurl'} = $in->{'url'};
if (!$in->{'gpg_def'}) {
-r $in->{'gpg'} || return $text{'yum_repo_egpg'};
$repo->{'raw'}->{'gpgcheck'} = 1;
$repo->{'raw'}->{'gpgkey'} = 'file://'.$in->{'gpg'};
}
return $repo;
}
sub create_package_repo
{
my ($repo) = @_;
my $file = "$yum_repos_dir/$repo->{'id'}.repo";
-r $file && return $text{'yum_repo_efile'};
&lock_file($file);
my $lref = &read_file_lines($file);
push(@$lref, "[$repo->{'id'}]");
foreach my $r (keys %{$repo->{'raw'}}) {
push(@$lref, $r."=".$repo->{'raw'}->{$r});
}
&flush_file_lines($file);
&unlock_file($file);
return undef;
}
sub delete_package_repo
{
my ($repo) = @_;
&lock_file($repo->{'file'});
my $lref = &read_file_lines($repo->{'file'});
splice(@$lref, $repo->{'line'}, $repo->{'eline'}-$repo->{'line'}+1);
&flush_file_lines($repo->{'file'});
&unlock_file($repo->{'file'});
}
sub enable_package_repo
{
my ($repo, $enable) = @_;
&lock_file($repo->{'file'});
my $lref = &read_file_lines($repo->{'file'});
my $e = "enabled=".($enable ? 1 : 0);
if (defined($repo->{'raw'}->{'enabled'})) {
for(my $i=$repo->{'line'}; $i<=$repo->{'eline'}; $i++) {
if ($lref->[$i] =~ /^enabled=/) {
$lref->[$i] = $e;
last;
}
}
}
else {
splice(@$lref, $repo->{'eline'}, 0, $e);
}
&flush_file_lines($repo->{'file'});
&unlock_file($repo->{'file'});
}
1;
