#!./perl -w
BEGIN {
chdir 't' if -d 't';
@INC = '../lib';
}
my $debug = 1;
my $marker1 = "<-- HERE";
my $marker2 = " <-- HERE ";
eval 'use Config';
our %Config;
my $inf_m1 = ($Config{reg_infty} || 32767) - 1;
my $inf_p1 = $inf_m1 + 2;
my @death =
(
'/[[=foo=]]/' =~ 'POSIX syntax [= =] is reserved for future extensions in regex; marked by {
'/(?<= .*)/' =>  'Variable length lookbehind not implemented in regex; marked by {
'/(?<= x{1000})/' => 'Lookbehind longer than 255 not implemented in regex; marked by {
'/(?@)/' => 'Sequence (?@...) not implemented in regex; marked by {
'/(?{ 1/' => 'Sequence (?{...}) not terminated or not {}-balanced in regex; marked by {
'/(?(1x))/' => 'Switch condition not recognized in regex; marked by {
'/(?(1)x|y|z)/' => 'Switch (?(condition)... contains too many branches in regex; marked by {
'/(?(x)y|x)/' => 'Unknown switch condition (?(x) in regex; marked by {
'/(?/' => 'Sequence (? incomplete in regex; marked by {
'/(?;x/' => 'Sequence (?;...) not recognized in regex; marked by {
'/(?<;x/' => 'Sequence (?<;...) not recognized in regex; marked by {
'/((x)/' => 'Unmatched ( in regex; marked by {
"/x{$inf_p1}/" => "Quantifier in {,} bigger than $inf_m1 in regex; marked by {
'/x{3,1}/' => 'Can\'t do {n,m} with n > m in regex; marked by {
'/x**/' => 'Nested quantifiers in regex; marked by {
'/x[/' => 'Unmatched [ in regex; marked by {
'/*/', => 'Quantifier follows nothing in regex; marked by {
'/\p{x/' => 'Missing right brace on \p{} in regex; marked by {
'/[\p{x]/' => 'Missing right brace on \p{} in regex; marked by {
'/(x)\2/' => 'Reference to nonexistent group in regex; marked by {
'my $m = "\\\"; $m =~ $m', => 'Trailing \ in regex m/\/',
'/\x{1/' => 'Missing right brace on \x{} in regex; marked by {
'/[\x{X]/' => 'Missing right brace on \x{} in regex; marked by {
'/[[:barf:]]/' => 'POSIX class [:barf:] unknown in regex; marked by {
'/[[=barf=]]/' => 'POSIX syntax [= =] is reserved for future extensions in regex; marked by {
'/[[.barf.]]/' => 'POSIX syntax [. .] is reserved for future extensions in regex; marked by {
'/[z-a]/' => 'Invalid [] range "z-a" in regex; marked by {
'/\p/' => 'Empty \p{} in regex; marked by {
'/\P{}/' => 'Empty \P{} in regex; marked by {
);
@warning = (
"m/(?p{ 'a' })/" => "(?p{}) is deprecated - use (??{}) in regex; marked by {
'm/\b*/' => '\b* matches null string many times in regex; marked by {
'm/[:blank:]/' => 'POSIX syntax [: :] belongs inside character classes in regex; marked by {
"m'[\\y]'"     => 'Unrecognized escape \y in character class passed through in regex; marked by {
'm/[a-\d]/' => 'False [] range "a-\d" in regex; marked by {
'm/[\w-x]/' => 'False [] range "\w-" in regex; marked by {
"m'\\y'"     => 'Unrecognized escape \y passed through in regex; marked by {
);
my $total = (@death + @warning)/2;
my $Is_EBCDIC = (ord('A') == 193);
if ($Is_EBCDIC) {
my @utf8_death = grep(/utf8/, @death);
$total = $total - @utf8_death;
}
print "1..$total\n";
my $count = 0;
while (@death)
{
my $regex = shift @death;
my $result = shift @death;
next if ($Is_EBCDIC && $regex =~ /utf8/);
$count++;
$_ = "x";
eval $regex;
if (not $@) {
print "
next;
}
chomp $@;
$result =~ s/{\
$result =~ s/{\
$result .= " at ";
if ($@ !~ /^\Q$result/) {
print "
}
print "ok $count - $regex\n";
}
our $warning;
$SIG{__WARN__} = sub { $warning = shift };
while (@warning)
{
$count++;
my $regex = shift @warning;
my $result = shift @warning;
undef $warning;
$_ = "x";
eval $regex;
if ($@)
{
print "
next;
}
if (not $warning)
{
print "
next;
}
$result =~ s/{\
$result =~ s/{\
$result .= " at ";
if ($warning !~ /^\Q$result/)
{
print <<"EOM";
not ok $count
EOM
next;
}
print "ok $count - $regex\n";
}
