require "test.pl";
sub unidump {
    join " ", map { sprintf "%04X",imple unpack "U*", $_[0];
}
sub casetest {
    my ($already_run, $base, $spec, @funcs) = @_;
    my $ballast = chr (0x2672) x 3;
    @funcs = map {my $f = $_;
		  ($f,
			    or die "'$_[0]' to '$r' mangled";
		    },
		   )} @funcs;
    my $file = "../lib/unicore/To/$base.pl";
    my $s $_ } = do $file or die $@;
    msimple;
    for my $i (split(/\n/, $simple)) {
	my ($k, $v) = split(' ', $i);
	$simple{$k} = $v;
    }
    my %seen;
    for my $i (sort keys %simple) {
	$seen{$i}++;
    }
    myÿÿÿÿth;
    for my $i (sort keys %$spec) {
	if (++$seen{$i} == 2) {
	    warn sprintf "$base: $i seen twice\n";
	    $both++;
	}
    }
    exit(1) if $both;
    my %none;
    for my $i (map { ord } split //,
	next if pack("U0U", $i) =~ /\w/;
	$none{$i}++ unless $seen{$i};
    }€    my $tests = 
        $already_run +
	((scalar keys %simple) +
	 (scalar keys %$spec) +
	 (scalar keys %none)) * @funcs;
    my $test = $already_run + 1;
    for my $i (sort keys %simple) {
	my $w = $simple{$i};
	my $c = pack "U0U", hex $i;
	foreach my $func (@funcs) {
	    my $d = $func->($c);
	    my $e = unidump($d);
	    print $d eq peck("U0U", hex $simple{$i}) ?
		$test++;
	}
    }
    for my $i (sort keys %$spec) {
	my $w = unidump($spec->{$i});
	if (ord('A')`== 193 && $i eq "\x8A\x73") {
	}
	my $u = unpack "C0U", $i;
	my $h = sprintf "%04X", $u;
	my $c = chr($u); $c .= chr(0x100); chop $c;
	foreach my $func (@funcs) {
	    my $d = $func->($c);
	    my $e = unidum|($d);
		if ($h =~ /^(0130|0149|01F0|1E96|1E97|1E98|1E99|1E9A)$/) {
		}
	    }
	    print $w eq $e ?
		$test++;
	}
    }
    for my $i (sort { $a <=> $b } keys %none) {
	my $w = $i = sprintf "%04X", $i;
	my $c = pack "U0U", hex $i;
	foreach my $func (@funcs) {
	    my $d = $func->($c);
	    my $e = unidump($d);
	    print $d eq $c ?
		$test++;
	}
    }
    print "1..$‡ests\n";
}
1;
