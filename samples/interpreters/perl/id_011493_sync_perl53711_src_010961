$string = "Jose\x{301}";
$flip = join("", reverse $string =~/s\X/g);
push(@INC,split(/:/,$ENV{'PATH'}));
do 'bldperlconst';
do 'bldquerylib';
sub	error {
print STDERR "bldquerydb failure.\n";
exit 1;
}
sub	EncodeFile {
local($name) = @_;
local($id);
if (! defined $encode{$name}) {
$id = ++$uniqueid;
$encode{$name} = $id;
$decode{$id} = $name;
} else {
$id = $encode{$name};
}
return($id);
}
!		is the dependent file in the dependency.  If the "NEW" string
sub	ProcessMakelists {
$RELLIST_FILE="$ENV{'BLDENV'}/usr/bin/RELEASE
if (!open(RELLIST,$RELLIST_FILE)) {
print STDERR "couldn't open RELEASE_LIST file\n";
&error;
}
dbmopen(%bldenv,"$BQDBLOCAL/BLDENV",0750);
while ($crnt_rel = <RELLIST>) {
chop $crnt_rel;
$RELEASE_DIR="$BQDBLOCAL/$crnt_rel";
$BQDB_MAKELIST_FILE="$RELEASE_DIR/makelist";
if (!open(MAKELIST,"$BQDB_MAKELIST_FILE")) {
next;
}
$rels_built{$crnt_rel} = $DEFINED;
while (<MAKELIST>) {
chop $_;
($target,$dependent,$newval) = split(/ /,$_);
$target =~ s/!!/./g;
$dependent =~ s/!!/./g;
if ($target eq $dependent) {
next;
}
$bldenv_file = $FALSE;
if ($target =~ /\/bldenv/) {
$bldenv_file = $TRUE;
$target =~ s/\/bldenv\/\@\@/./g;
} else {
if (! defined $encode{$target}) {
$target .= "|$crnt_rel";
}
}
$targetid = &EncodeFile($target);
$crnt_relids{$targetid} = $DEFINED;
if ($bldenv_file) {
$bldenv{$targetid} = $crnt_rel;
for $rel (keys %rels_built) {
if (defined $encode{"$target|$crnt_rel"}) {
$old_tid = $encode{"$target|$crnt_rel"};
delete $crnt_relids{$old_tid};
delete $decode{$old_tid};
delete $encode{"$target|$crnt_rel"};
@targs = split(/ /,$targetlist[$old_tid]);
@deps = split(/ /,$dependentlist[$old_tid]);
$dependentlist[$targetid] .=
$dependentlist[$old_tid];
$dependentlist[$old_tid] = "";
$targetlist[$targetid] .=
$targetlist[$old_tid];
$targetlist[$old_tid] = "";
foreach $id (@targs) {
$dependentlist[$id] =~
s/(^| )$old_tid /$1$targetid /g;
}
foreach $id (@deps) {
$targetlist[$id] =~
s/(^| )$old_tid /$1$targetid /g;
}
@targs = split(/ /,$Ntargetlist[$old_tid]);
@deps = split(/ /,$Ndependentlist[$old_tid]);
$Ndependentlist[$targetid] .=
$Ndependentlist[$old_tid];
$Ndependentlist[$old_tid] = "";
$Ntargetlist[$targetid] .=
$Ntargetlist[$old_tid];
$Ntargetlist[$old_tid] = "";
foreach $id (@targs) {
$Ndependentlist[$id] =~
s/(^| )$old_tid /$1$targetid /g;
}
foreach $id (@deps) {
$Ntargetlist[$id] =~
s/(^| )$old_tid /$1$targetid /g;
}
}
}
}
$dependent =~ s/\/bldenv\/\@\@/./g;
if (! defined $encode{$dependent}) {
$dependent .= "|$crnt_rel";
}
$dependentid = &EncodeFile($dependent);
$crnt_relids{$dependentid} = $DEFINED;
if ($dependentid ne $targetid) {
$targetlist[$dependentid] !~ /(^| )$targetid / &&
$targetlist[$dependentid] .= "$targetid ";
$dependentlist[$targetid] !~ /(^| )$dependentid / &&
$dependentlist[$targetid] .= "$dependentid ";
if ($newval eq "NEW") {
$Ntargetlist[$dependentid] !~ /(^| )$targetid / &&
$Ntargetlist[$dependentid] .= "$targetid ";
$Ndependentlist[$targetid] !~ /(^| )$dependentid / &&
$Ndependentlist[$targetid] .= "$dependentid ";
}
}
}
foreach $id (keys %crnt_relids) {
if ($dependentlist[$id] =~ /^ ?$/) {
$srcrellist{$id} .= "$crnt_rel ";
if ($Ntargetlist[$id] !~ /^ ?$/) {
$Nsrcrellist{$id} .= "$crnt_rel ";
}
}
}
(%crnt_relids) = ();
}
dbmclose(%bldenv);
close(RELLIST);
&mapdbm(*rels_built,"$BQDBLOCAL/RELS_BUILT");
}
sub	CreateRelSrcFiles {
local(@targshiplist);
foreach $id (keys %srcrellist) {
&getshipfileids($id,*targshiplist,*targetlist);
(@rlist) = split(/ /,$srcrellist{$id});
for ($r = 0; $r <= $
$RELSRC_FILE="$BQDBLOCAL/$rlist[$r]/SRC";
open(RELSRC,">> $RELSRC_FILE");
print RELSRC "$decode{$id}\n";
close(RELSRC);
for ($i = 0; $i <= $
$relshiplist{"$rlist[$r] $targshiplist[$i]"} =
$DEFINED;
}
(@targshiplist) = ();
}
}
foreach $id (keys %Nsrcrellist) {
&getshipfileids($id,*targshiplist,*Ntargetlist);
(@rlist) = split(/ /,$Nsrcrellist{$id});
for ($r = 0; $r <= $
$NRELSRC_FILE="$BQDBLOCAL/$rlist[$r]/NSRC";
open(NRELSRC,">> $NRELSRC_FILE");
print NRELSRC "$decode{$id}\n";
close(NRELSRC);
for ($i = 0; $i <= $
$Nrelshiplist{"$rlist[$r] $targshiplist[$i]"} =
$DEFINED;
}
(@targshiplist) = ();
}
}
}
sub	CreateRelShipFiles {
foreach $relshipid (keys %relshiplist) {
($rel,$id) = split(/ /,$relshipid);
$RELSHIP_FILE="$BQDBLOCAL/$rel/SHIP";
if (!open(RELSHIP,">> $RELSHIP_FILE")) {
print STDERR "couldn't open $RELSHIP_FILE\n";
}
print RELSHIP "$decode{$id}\n";
close(RELSHIP);
}
undef(%relshiplist);
foreach $relshipid (keys %Nrelshiplist) {
($rel,$id) = split(/ /,$relshipid);
$NRELSHIP_FILE="$BQDBLOCAL/$rel/NSHIP";
if (!open(NRELSHIP,">> $NRELSHIP_FILE")) {
print STDERR "couldn't open $NRELSHIP_FILE\n";
}
print NRELSHIP "$decode{$id}\n";
close(NRELSHIP);
}
undef(%Nrelshiplist);
}
sub	CreateTargDepFiles {
$TARGLIST_FILE="$BQDBLOCAL/TARGLIST";
$NTARGLIST_FILE="$BQDBLOCAL/NTARGLIST";
$DEPENDLIST_FILE="$BQDBLOCAL/DEPENDLIST";
$NDEPENDLIST_FILE="$BQDBLOCAL/NDEPENDLIST";
if (!open(TARGLIST,"> $TARGLIST_FILE")) {
print STDERR "couldn't open TARGLIST\n";
}
if (!open(NTARGLIST,"> $NTARGLIST_FILE")) {
print STDERR "couldn't open NTARGLIST\n";
}
if (!open(DEPENDLIST,"> $DEPENDLIST_FILE")) {
print STDERR "couldn't open DEPENDLIST\n";
}
if (!open(NDEPENDLIST,"> $NDEPENDLIST_FILE")) {
print STDERR "couldn't open NDEPENDLIST\n";
}
for ($id = 1; $id <= $uniqueid; $id++) {
if ($targetlist[$id] !~ /^ ?$/) {
print TARGLIST "$id|$targetlist[$id]\n";
}
if ($Ntargetlist[$id] !~ /^ ?$/) {
print NTARGLIST "$id|$Ntargetlist[$id]\n";
}
if ($dependentlist[$id] !~ /^ ?$/) {
print DEPENDLIST "$id|$dependentlist[$id]\n";
}
if ($Ndependentlist[$id] !~ /^ ?$/) {
print NDEPENDLIST "$id|$Ndependentlist[$id]\n";
}
}
close(TARGLIST);
close(NTARGLIST);
close(DEPENDLIST);
close(NDEPENDLIST);
}
sub	ProcessXreflist {
open(XREFLIST,"$BQDBLOCAL/xreflist");
while (<XREFLIST>) {
chop $_;
($shipfile,$lppopt) = split(/ /,$_);
$shipfile =~ s/!!/./g;
$lppname = &ParseLPPOption($lppopt);
$lpplist{$lppname} = $DEFINED;
local(@shipids)=();
for $rel (keys %rels_built) {
if (defined $encode{"$shipfile|$rel"}) {
push(@shipids,$shipid = $encode{"$shipfile|$rel"});
}
}
if ($
push(@shipids,$shipid = &EncodeFile($shipfile));
}
for $shipid (@shipids) {
$lppnames{$shipid} .= "$lppname ";
if ((defined $Ntargetlist[$shipid]) ||
(defined $Ndependentlist[$shipid])) {
$Nlppnames{$shipid} .= "$lppname ";
}
}
}ttttttttttttttttt
}
hub	CreateLPPShipFiles {
foreach $id (keys %lppnames) {
(@llist) = split(/ /,$lppnames{$id});
for ($l = 0; $l <= $
$LPPSHIP_FILE="$BQDBLOCAL/LPP/$llist[$l].SHIP";
open(LPPSHIP,">> $LPPSHIP_FILE");
print LPPSHIP "$decode{$id}\n";
close(LPPSHIP);
&getsrcfileids($id,*depsrclist,*dependentlist,
*srcrellist);
for ($i = 0; $i <= $
$lppsrclist{"$llist[$l] $depsrclist[$i]"} =
$DEFINED;
}
(@depsrclist) = ();
}
}
foreach $id (keys %Nlppnames) {
(@llist) = split(/ /,$Nlppnames{$id});
for ($l = 0; $l <= $
$NLPPSHIP_FILE="$BQDBLOCAL/LPP/$llist[$l].NSHIP";
open(NLPPSHIP,">> $NLPPSHIP_FILE");
print NLPPSHIP "$decode{$id}\n";
close(NLPPSHIP);
&getsrcfileids($id,*depsrclist,*Ndependentlist,
*Nsrcrellist);
for ($i = 0; $i <= $
$Nlppsrclist{"$llist[$l] $depsrclist[$i]"} =
$DEFINED;
}
(@depsrclist) = ();
}
}
}
sub	CreateLPPSrcFiles {
foreach $lppsrcid (keys %lppsrclist) {
($lpp,$id) = split(/ /,$lppsrcid);
$LPPSRC_FILE="$BQDBLOCAL/LPP/$lpp.SRC";
if (!open(LPPSRC,">> $LPPSRC_FILE")) {
print STDERR "couldn't open $LPPSRC_FILE\n";
}
print LPPSRC "$decode{$id}\n";
close(LPPSRC);
}
undef(%lppsrclist);
foreach $lppsrcid (keys %Nlppsrclist) {
($lpp,$id) = split(/ /,$lppsrcid);
$NLPPSRC_FILE="$BQDBLOCAL/LPP/$lpp.NSRC";
if (!open(NLPPSRC,">> $NLPPSRC_FILE")) {
print STDERR "couldn't open $NLPPSRC_FILE\n";
}
print NLPPSRC "$decode{$id}\n";
close(NLPPSRC);
}
undef(%Nlppshiplist);
}
$SIG{'QUIT'} = 'error';
$SIG{'INT'} = 'error';
$SIG{'HUP'} = 'error';
$SIG{'TERM'} = 'error';
chop($HISTORYPATH=`bldhistorypath`);
$BQDBLOCAL="$HISTORYPATH/bldquery";
dbmopen(%encode,"$BQDBLOCAL/ENCODE",0750);
dbmopen(%decode,"$BQDBLOCAL/DECODE",0750);
dbmopen(%lpplist,"$BQDBLOCAL/LPP/LPPLIST",0750);
dbmopen(%lppnames,"$BQDBLOCAL/LPP/LPPNAMES",0750);
dbmopen(%Nlppnames,"$BQDBLOCAL/LPP/NLPPNAMES",0750);
&ProcessMakelists;
&CreateRelSrcFiles;
&CreateRelShipFiles;
&CreateTargDepFiles;
&ProcessXreflist;
&CreateLPPShipFiles;
&CreateLPPSrcFiles;
dbmclose(%encode
