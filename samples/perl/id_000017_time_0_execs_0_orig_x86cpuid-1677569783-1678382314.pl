#!/usr/bin/env perl
$0 =~ m/(.*[\/\\])[^\/\\]+$/; $dir=$1;
push(@INC, "${dir}perlasm", "perlasm");
require "x86asm.pl";
&asm_init($ARGV[0],"x86cpuid");
for (@ARGV) { $sse2=1 if (/-DOPENSSL_IA32_SSE2/); }
&function_begin("OPENSSL_ia32_cpuid");
&xor	("edx","edx");
&pushf	();
&pop	("eax");
&mov	("ecx","eax");
&xor	("eax",1<<21);
&push	("eax");
&popf	();
&pushf	();
&pop	("eax");
&xor	("ecx","eax");
&xor	("eax","eax");
&bt	("ecx",21);
&jnc	(&label("nocpuid"));
&mov	("esi",&wparam(0));
&mov	(&DWP(8,"esi"),"eax");
&cpuid	();
&mov	("edi","eax");
&xor	("eax","eax");
&cmp	("ebx",0x756e6547);
&setne	(&LB("eax"));
&mov	("ebp","eax");
&cmp	("edx",0x49656e69);
&setne	(&LB("eax"));
&or	("ebp","eax");
&cmp	("ecx",0x6c65746e);
&setne	(&LB("eax"));
&or	("ebp","eax");
&jz	(&label("intel"));
&cmp	("ebx",0x68747541);
&setne	(&LB("eax"));
&mov	("esi","eax");
&cmp	("edx",0x69746E65);
&setne	(&LB("eax"));
&or	("esi","eax");
&cmp	("ecx",0x444D4163);
&setne	(&LB("eax"));
&or	("esi","eax");
&jnz	(&label("intel"));
&mov	("eax",0x80000000);
&cpuid	();
&cmp	("eax",0x80000001);
&jb	(&label("intel"));
&mov	("esi","eax");
&mov	("eax",0x80000001);
&cpuid	();
&or	("ebp","ecx");
&and	("ebp",1<<11|1);
&cmp	("esi",0x80000008);
&jb	(&label("intel"));
&mov	("eax",0x80000008);
&cpuid	();
&movz	("esi",&LB("ecx"));
&inc	("esi");
&mov	("eax",1);
&xor	("ecx","ecx");
&cpuid	();
&bt	("edx",28);
&jnc	(&label("generic"));
&shr	("ebx",16);
&and	("ebx",0xff);
&cmp	("ebx","esi");
&ja	(&label("generic"));
&and	("edx",0xefffffff);
&jmp	(&label("generic"));
&set_label("intel");
&cmp	("edi",7);
&jb	(&label("cacheinfo"));
&mov	("esi",&wparam(0));
&mov	("eax",7);
&xor	("ecx","ecx");
&cpuid	();
&mov	(&DWP(8,"esi"),"ebx");
&set_label("cacheinfo");
&cmp	("edi",4);
&mov	("edi",-1);
&jb	(&label("nocacheinfo"));
&mov	("eax",4);
&mov	("ecx",0);
&cpuid	();
&mov	("edi","eax");
&shr	("edi",14);
&and	("edi",0xfff);
&set_label("nocacheinfo");
&mov	("eax",1);
&xor	("ecx","ecx");
&cpuid	();
&and	("edx",0xbfefffff);
&cmp	("ebp",0);
&jne	(&label("notintel"));
&or	("edx",1<<30);
&and	(&HB("eax"),15);
&cmp	(&HB("eax"),15);
&jne	(&label("notintel"));
&or	("edx",1<<20);
&set_label("notintel");
&bt	("edx",28);
&jnc	(&label("generic"));
&and	("edx",0xefffffff);
&cmp	("edi",0);
&je	(&label("generic"));
&or	("edx",0x10000000);
&shr	("ebx",16);
&cmp	(&LB("ebx"),1);
&ja	(&label("generic"));
&and	("edx",0xefffffff);
&set_label("generic");
&and	("ebp",1<<11);
&and	("ecx",0xfffff7ff);
&mov	("esi","edx");
&or	("ebp","ecx");
&bt	("ecx",27);
&jnc	(&label("clear_avx"));
&xor	("ecx","ecx");
&data_byte(0x0f,0x01,0xd0);
&and	("eax",6);
&cmp	("eax",6);
&je	(&label("done"));
&cmp	("eax",2);
&je	(&label("clear_avx"));
&set_label("clear_xmm");
&and	("ebp",0xfdfffffd);
&and	("esi",0xfeffffff);
&set_label("clear_avx");
&and	("ebp",0xefffe7ff);
&mov	("edi",&wparam(0));
&and	(&DWP(8,"edi"),0xffffffdf);
&set_label("done");
&mov	("eax","esi");
&mov	("edx","ebp");
&set_label("nocpuid");
&function_end("OPENSSL_ia32_cpuid");
&external_label("OPENSSL_ia32cap_P");
&function_begin_B("OPENSSL_rdtsc","EXTRN\t_OPENSSL_ia32cap_P:DWORD");
&xor	("eax","eax");
&xor	("edx","edx");
&picmeup("ecx","OPENSSL_ia32cap_P");
&bt	(&DWP(0,"ecx"),4);
&jnc	(&label("notsc"));
&rdtsc	();
&set_label("notsc");
&ret	();
&function_end_B("OPENSSL_rdtsc");
&function_begin_B("OPENSSL_instrument_halt","EXTRN\t_OPENSSL_ia32cap_P:DWORD");
&picmeup("ecx","OPENSSL_ia32cap_P");
&bt	(&DWP(0,"ecx"),4);
&jnc	(&label("nohalt"));
&data_word(0x9058900e);
&and	("eax",3);
&jnz	(&label("nohalt"));
&pushf	();
&pop	("eax");
&bt	("eax",9);
&jnc	(&label("nohalt"));
&rdtsc	();
&push	("edx");
&push	("eax");
&halt	();
&rdtsc	();
&sub	("eax",&DWP(0,"esp"));
&sbb	("edx",&DWP(4,"esp"));
&add	("esp",8);
&ret	();
&set_label("nohalt");
&xor	("eax","eax");
&xor	("edx","edx");
&ret	();
&function_end_B("OPENSSL_instrument_halt");
&function_begin_B("OPENSSL_far_spin");
&pushf	();
&pop	("eax");
&bt	("eax",9);
&jnc	(&label("nospin"));
&mov	("eax",&DWP(4,"esp"));
&mov	("ecx",&DWP(8,"esp"));
&data_word (0x90d88e1e);
&xor	("eax","eax");
&mov	("edx",&DWP(0,"ecx"));
&jmp	(&label("spin"));
&align	(16);
&set_label("spin");
&inc	("eax");
&cmp	("edx",&DWP(0,"ecx"));
&je	(&label("spin"));
&data_word (0x1f909090);
&ret	();
&set_label("nospin");
&xor	("eax","eax");
&xor	("edx","edx");
&ret	();
&function_end_B("OPENSSL_far_spin");
&function_begin_B("OPENSSL_wipe_cpu","EXTRN\t_OPENSSL_ia32cap_P:DWORD");
&xor	("eax","eax");
&xor	("edx","edx");
&picmeup("ecx","OPENSSL_ia32cap_P");
&mov	("ecx",&DWP(0,"ecx"));
&bt	(&DWP(0,"ecx"),1);
&jnc	(&label("no_x87"));
if ($sse2) {
&and	("ecx",1<<26|1<<24);
&cmp	("ecx",1<<26|1<<24);
&jne	(&label("no_sse2"));
&pxor	("xmm0","xmm0");
&pxor	("xmm1","xmm1");
&pxor	("xmm2","xmm2");
&pxor	("xmm3","xmm3");
&pxor	("xmm4","xmm4");
&pxor	("xmm5","xmm5");
&pxor	("xmm6","xmm6");
&pxor	("xmm7","xmm7");
&set_label("no_sse2");
}
&data_word(0xeed9eed9,0xeed9eed9,0xeed9eed9,0xeed9eed9,0x90e3db9b);
&set_label("no_x87");
&lea	("eax",&DWP(4,"esp"));
&ret	();
&function_end_B("OPENSSL_wipe_cpu");
&function_begin_B("OPENSSL_atomic_add");
&mov	("edx",&DWP(4,"esp"));
&mov	("ecx",&DWP(8,"esp"));
&push	("ebx");
&nop	();
&mov	("eax",&DWP(0,"edx"));
&set_label("spin");
&lea	("ebx",&DWP(0,"eax","ecx"));
&nop	();
&data_word(0x1ab10ff0);
&jne	(&label("spin"));
&mov	("eax","ebx");
&pop	("ebx");
&ret	();
&function_end_B("OPENSSL_atomic_add");
&function_begin_B("OPENSSL_indirect_call");
{
my ($max,$i)=(7,);
&push	("ebp");
&mov	("ebp","esp");
&sub	("esp",$max*4);
&mov	("ecx",&DWP(12,"ebp"));
&mov	(&DWP(0,"esp"),"ecx");
&mov	("edx",&DWP(16,"ebp"));
&mov	(&DWP(4,"esp"),"edx");
for($i=2;$i<$max;$i++)
{
&mov	("eax",&DWP(12+$i*4,"ebp"));
&mov	(&DWP(0+$i*4,"esp"),"eax");
}
&call_ptr	(&DWP(8,"ebp"));
&mov	("esp","ebp");
&pop	("ebp");
&ret	();
}
&function_end_B("OPENSSL_indirect_call");
&function_begin_B("OPENSSL_cleanse");
&mov	("edx",&wparam(0));
&mov	("ecx",&wparam(1));
&xor	("eax","eax");
&cmp	("ecx",7);
&jae	(&label("lot"));
&cmp	("ecx",0);
&je	(&label("ret"));
&set_label("little");
&mov	(&BP(0,"edx"),"al");
&sub	("ecx",1);
&lea	("edx",&DWP(1,"edx"));
&jnz	(&label("little"));
&set_label("ret");
&ret	();
&set_label("lot",16);
&test	("edx",3);
&jz	(&label("aligned"));
&mov	(&BP(0,"edx"),"al");
&lea	("ecx",&DWP(-1,"ecx"));
&lea	("edx",&DWP(1,"edx"));
&jmp	(&label("lot"));
&set_label("aligned");
&mov	(&DWP(0,"edx"),"eax");
&lea	("ecx",&DWP(-4,"ecx"));
&test	("ecx",-4);
&lea	("edx",&DWP(4,"edx"));
&jnz	(&label("aligned"));
&cmp	("ecx",0);
&jne	(&label("little"));
&ret	();
&function_end_B("OPENSSL_cleanse");
&function_begin_B("OPENSSL_ia32_rdrand");
&mov	("ecx",8);
&set_label("loop");
&rdrand	("eax");
&jc	(&label("break"));
&loop	(&label("loop"));
&set_label("break");
&cmp	("eax",0);
&cmove	("eax","ecx");
&ret	();
&function_end_B("OPENSSL_ia32_rdrand");
&function_begin_B("OPENSSL_ia32_rdseed");
&mov	("ecx",8);
&set_label("loop");
&rdseed	("eax");
&jc	(&label("break"));
&loop	(&label("loop"));
&set_label("break");
&cmp	("eax",0);
&cmove	("eax","ecx");
&ret	();
&function_end_B("OPENSSL_ia32_rdseed");
&initseg("OPENSSL_cpuid_setup");
&hidden("OPENSSL_cpuid_setup");
&hidden("OPENSSL_ia32cap_P");
&asm_finish();
