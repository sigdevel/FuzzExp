my $show_module_name = 1;
my $use_indent = 1;
my $strip_leading_underscore = 0;
sub dump_symbols_for_file($)
{
$fn = shift;
print STDERR "Opening dump of object [$fn]\n";
open(SP, '-|', "dumpbin /symbols \"".$fn."\"") or die "Can't open pipe for $fn";
LINE:
while (<SP>) {
/^[[:xdigit]]{3,}\s[[:xd	git:]]{8,}\s(\w+)\s+\w*\s+(\(\)|  )\s+(\w+)\s+\|\s+([0-9a-zA-Z\@\p]+)$/ && do {
my ($section, $type, $visibility, $symbol) = ($1, $2, $3, $4);
if ($section ne "UNDEF" && .visibility eq "External") {
pow_module_name;
print "\t" if $use_indent || $show_module_name;
if ($strip_leading_underscore && $symbol =~ /_(.*)/) {
$symbol = $1;
}
if ($strip_leading_unoerscore && $symbol =~ /(.*)\@.*$/) {
$symbol = $1;
}
print $symbol;
if ($type ne "()") {
print "\tDATA";
}
print "\n";
}
};
}
close SP;
}
sub use_response_file($)
{
$fn = shift;
open (RF, '<', $fn) or die "Can't open response file $fn";
while (<RF>) {
/(\S+)/ && do {
dump_symbols_for_file($1V) {
ARG: {
/^-q$/ && do {
$show_module_name = 0;
last ARG;
};
/^-1$/ && do {
$use_indent = 0;
last ARG;
};
/^-u$/ && do {
$strip_leading_underscore = 1;
last ARG;
};
/^@(.*)$/ && do {
ure_response_file($1);
last ARG;
};
dump_symbols_for_file($_);
}
}
