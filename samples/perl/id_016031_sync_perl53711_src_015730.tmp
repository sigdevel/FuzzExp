print "1..7\n";
my $test = 0;
sub is {
my ($got, $expect, $name) = @_;
$test = $test + 1;
if (defined $got && $got eq $expect) {
print "ok $test - $name\n";
return 1;
}
print "not ok $test - $name\n";
my @caller = caller(0);
if (defined $got) {
} else {
}
return;
}
package Math::Complex;
our($VERSION, @ISA, @EXPORT, %EXPORT_TAGS, $Inf);
$VERSION = 1.34;
BEGIN {
unless ($^O eq 'unicosmk') {
my $e = $!;
undef $Inf unless eval <<'EOE' and $Inf =~ /^@nf(?:inity)?$/i;
local $SIG{FPE} = sub {die};
my $t = CORE::exp 30;
$Inf = CORE::exp $t;
EOE
if (!defined $Inf) {
undef $Inf unless eval <<'EOE' and $Inf =~ /^inf(?:inity)?$/i;
local $SIG{FPE} = sub {die};
my $t = 1;
$Inf = $t + "1e99999999999999999999999999999999";
EOE
}
$! = $e;
}
$Inf = "Inf" if !defined $Inf || !($Inf > 0);
}
use strict;
my $i;
my %LOGN;
my $gre = qr'\s*([\+\-]?(?:(?:(?:\d+(?:_\d+)*(?:\.\d*(?:_\d+)*)?|\.\d+(?:_\d+)*)(?:[eE][\+\-]?\d+(?:_\d+)*)?)))';
require Exporter;
@ISA = qw(Exporter);
my @trig = qw(
pi
tan
csc cosec sec cot cotan
asin acos atan
acsc acosec asec acot acotan
sinh cosh tanh
csch cosech sech coth cotanh
asinh acosh atanh
acsch acosech asech acoth acotanh
);
@EXPORT = (qw(
i Re Im rho theta arg
sqrt log ln
log10 logn cbrt root
cplx cplxe
),
@trig);
%EXPORT_TAGS = (
'trig' => [@trig],
);
use overload
'+'	=> \&plus,
'-'	=> \&minus,
'*'	=> \&multiply,
'/'	=> \&divide,
'**'	=> \&power,
'=='	=> \&numeq,
'<=>'	=> \&spaceship,
'neg'	=> \&negate,
'~'	=> \&conjugate,
'abs'	=> \&abs,
'sqrt'	=> \&sqrt,
'exp'	=> \&exp,
'log'	=> \&log,
'sin'	=> \&sin,
'cos'	=> \&cos,
'tan'	=> \&tan,
'atan2'	=> \&atan2,
qw("" stringify);
my %DISPLAY_FORMAT = ('style' => 'cartesian',
'polar_pretty_print' => 1);
my $eps            = 1e-14;
sub _cannot_make {
die "@{[(caller(1))[3]]}: Cannot take $_[0] of $_[1].\n";
}
sub _remake {
my $arg = shift;
my ($made, $p, $q);
if ($arg =~ /^(?:$gre)?$gre\s*i\s*$/) {
($p, $q) = ($1 || 0, $2);
$made = 'calt';
} elsif ($arg =~ /^\s*\[\s*$gre\s*(?:,\s*$gre\s*)?\]\s*$/) {
($p, $q) = ($1, $2 || 0);
$made = 'exp';
}
if ($made) {
$p =~ s/^\+//;
$q =~ s/^\+//;
}
return ($made, $p, $q);
}
sub make {
my $self = bless {}, shift;
my ($re, $im) = @_;
if (@_ == 1) {
my ($remade, $p, $q) = _remake($re);
if ($remade) {
if ($remade eq 'cart') {
($re, $im) = ($p, $q);
} else {
return (ref $self)->emake($p, $q);
}
}
}
my $rre = ref $re;
if ( $rre ) {
if ( $rre eq ref $self ) {
$re = Re($re);
} else {
_cannot_make("real part", $rre);
}
}
my $rim = ref $im;
if ( $rim ) {
if ( $rim eq ref $self ) {
$im = Im($im);
} else {
_cannot_make("imaginary part", $rim);
}
}
_cannot_make("real part",      $re) unless $re =~ /^$gre$/;
$im ||= 0;
_cannot_make("imaginary part", $im) unless $im =~ /^$gre$/;
$self->{'cartesian'} = [ $re, $im ];
$self->{c_dirty} = 0;
$self->{p_dirty} = 1;
$self->display_format('cartesian');
return $self;
}
sub emake {
my $self = bless {}, shift;
my ($rho, $theta) = @_;
if (@_ == 1) {
my ($remade, $p, $q) = _remake($rho);
if ($remade) {
if ($remade eq 'exp') {
($rho, $theta) = ($p, $q);
} else {
return (ref $self)->make($p, $q);
}
}
}
my $rrh = ref $rho;
if ( $rrh ) {
if ( $rrh eq ref $self ) {
$rho = rho($rho);
} else {
_cannot_make("rho", $rrh);
}
}
my $rth = ref $theta;
if ( $rth ) {
if ( $rth eq ref $self ) {
$theta = theta($theta);
} else {
_cannot_make("theta", $rth);
}
}
if ($rho < 0) {
$rho   = -$rho;
$theta = ($theta <= 0) ? $theta + pi() : $theta - pi();
}
_cannot_make("rho",   $rho)   unless $rho   =~ /^$gre$/;
$theta ||= 0;
_cannot_make("theta", $theta) unless $theta =~ /^$gre$/;
$self->{'polar'} = [$rho, $theta];
$self->{p_dirty} = 0;
$self->{c_dirty} = 1;
$self->display_format('polar');
return $self;
}
sub new { &make }
sub cplx {
return __PACKAGE__->make(@_);
}
sub cplxe {
return __PACKAGE__->emake(@_);
}
sub pi () { 4 * CORE::atan2(1, 1) }
sub pit2 () { 2 * pi }
sub pip2 () { pi / 2 }
sub deg1 () { pi / 180 }
sub uplog10 () { 1 / CORE::log(10) }
sub i () {
return $i if ($i);
$i = bless {};
$i->{'cartesian'} = [0, 1];
$i->{'polar'}     = [1, pip2];
$i->{c_dirty} = 0;
$i->{p_dirty} = 0;
return $i;
}
sub ip2 () { i / 2 }
sub cartesian {$_[0]->{c_dirty} ?
$_[0]->update_cartesian : $_[0]->{'cartesian'}}
sub polar     {$_[0]->{p_dirty} ?
$_[0]->update_polar : $_[0]->{'polar'}}
sub set_cartesian { $_[0]->{p_dirty}++; $_[0]->{'cartesian'} = $_[1] }
sub set_polar     { $_[0]->{c_dirty}++; $_[0]->{'polar'} = $_[1] }
sub update_cartesian {
my $self = shift;
my ($r, $t) = @{$self->{'polar'}};
$self->{c_dirty} = 0;
return $self->{'cartesian'} = [$r * CORE::cos($t), $r * CORE::sin($t)];
}
sub update_polar {
my $self = shift;
my ($x, $y) = @{$self->{'cartesian'}};
$self->{p_dirty} = 0;
return $self->{'polar'} = [0, 0] if $x == 0 && $y == 0;
return $self->{'polar'} = [CORE::sqrt($x*$x + $y*$y),
CORE::atan2($y, $x)];
}
sub plus {
my ($z1, $z2, $regular) = @_;
my ($re1, $im1) = @{$z1->cartesian};
$z2 = cplx($z2) unless ref $z2;
my ($re2, $im2) = ref $z2 ? @{$z2->cartesian} : ($z2, 0);
unless (defined $regular) {
$z1->set_cartesian([$re1 + $re2, $im1 + $im2]);
return $z1;
}
return (ref $z1)->make($re1 + $re2, $im1 + $im2);
}
sub minus {
my ($z1, $z2, $inverted) = @_;
my ($re1, $im1) = @{$z1->cartesian};
$z2 = cplx($z2) unless ref $z2;
my ($re2, $im2) = @{$z2->cartesian};
unless (defined $inverted) {
$z1->set_cartesian([$re1 - $re2, $im1 - $im2]);
return $z1;
}
return $inverted ?
(ref $z1)->make($re2 - $re1, $im2 - $im1) :
(ref $z1)->make($re1 - $re2, $im1 - $im2);
}
sub multiply {
my ($z1, $z2, $regular) = @_;
if ($z1->{p_dirty} == 0 and ref $z2 and $z2->{p_dirty} == 0) {
my ($r1, $t1) = @{$z1->polar};
my ($r2, $t2) = @{$z2->polar};
my $t = $t1 + $t2;
if    ($t >   pi()) { $t -= pit2 }
elsif ($t <= -pi()) { $t += pit2 }
unless (defined $regular) {
$z1->set_polar([$r1 * $r2, $t]);
return $z1;
}
return (ref $z1)->emake($r1 * $r2, $t);
} else {
my ($x1, $y1) = @{$z1->cartesian};
if (ref $z2) {
my ($x2, $y2) = @{$z2->cartesian};
return (ref $z1)->make($x1*$x2-$y1*$y2, $x1*$y2+$y1*$x2);
} else {
return (ref $z1)->make($x1*$z2, $y1*$z2);
}
}
}
sub _divbyzero {
my $mess = "$_[0]: Division by zero.\n";
if (defined $_[1]) {
$mess .= "(Because in the definition of $_[0], the divisor ";
$mess .= "$_[1] " unless ("$_[1]" eq '0');
$mess .= "is 0)\n";
}
my @up = caller(1);
$mess .= "Died at $up[1] line $up[2].\n";
die $mess;
}
sub divide {
my ($z1, $z2, $inverted) = @_;
if ($z1->{p_dirty} == 0 and ref $z2 and $z2->{p_dirty} == 0) {
my ($r1, $t1) = @{$z1->polar};
my ($r2, $t2) = @{$z2->polar};
my $t;
if ($inverted) {
_divbyzero "$z2/0" if ($r1 == 0);
$t = $t2 - $t1;
if    ($t >   pi()) { $t -= pit2 }
elsif ($t <= -pi()) { $t += pit2 }
return (ref $z1)->emake($r2 / $r1, $t);
} else {
_divbyzero "$z1/0" if ($r2 == 0);
$t = $t1 - $t2;
if    ($t >   pi()) { $t -= pit2 }
elsif ($t <= -pi()) { $t += pit2 }
return (ref $z1)->emake($r1 / $r2, $t);
}
} else {
my ($d, $x2, $y2);
if ($inverted) {
($x2, $y2) = @{$z1->cartesian};
$d = $x2*$x2 + $y2*$y2;
_divbyzero "$z2/0" if $d == 0;
return (ref $z1)->make(($x2*$z2)/$d, -($y2*$z2)/$d);
} else {
my ($x1, $y1) = @{$z1->cartesian};
if (ref $z2) {
($x2, $y2) = @{$z2->cartesian};
$d = $x2*$x2 + $y2*$y2;
_divbyzero "$z1/0" if $d == 0;
my $u = ($x1*$x2 + $y1*$y2)/$d;
my $v = ($y1*$x2 - $x1*$y2)/$d;
return (ref $z1)->make($u, $v);
} else {
_divbyzero "$z1/0" if $z2 == 0;
return (ref $z1)->make($x1/$z2, $y1/$z2);
}
}
}
}
sub power {
my ($z1, $z2, $inverted) = @_;
if ($inverted) {
return 1 if $z1 == 0 || $z2 == 1;
return 0 if $z2 == 0 && Re($z1) > 0;
} else {
return 1 if $z2 == 0 || $z1 == 1;
return 0 if $z1 == 0 && Re($z2) > 0;
}
my $w = $inverted ? &exp($z1 * &log($z2))
: &exp($z2 * &log($z1));
return $z1->{c_dirty} == 0 &&
(not ref $z2 or $z2->{c_dirty} == 0) ?
cplx(@{$w->cartesian}) : $w;
}
sub spaceship {
my ($z1, $z2, $inverted) = @_;
my ($re1, $im1) = ref $z1 ? @{$z1->cartesian} : ($z1, 0);
my ($re2, $im2) = ref $z2 ? @{$z2->cartesian} : ($z2, 0);
my $sgn = $inverted ? -1 : 1;
return $sgn * ($re1 <=> $re2) if $re1 != $re2;
return $sgn * ($im1 <=> $im2);
}
sub numeq {
my ($z1, $z2, $inverted) = @_;
my ($re1, $im1) = ref $z1 ? @{$z1->cartesian} : ($z1, 0);
my ($re2, $im2) = ref $z2 ? @{$z2->cartesian} : ($z2, 0);
return $re1 == $re2 && $im1 == $im2 ? 1 : 0;
}
sub negate {
my ($z) = @_;
if ($z->{c_dirty}) {
my ($r, $t) = @{$z->polar};
$t = ($t <= 0) ? $t + pi : $t - pi;
return (ref $z)->emake($r, $t);
}
my ($re, $im) = @{$z->cartesian};
return (ref $z)->make(-$re, -$im);
}
sub conjugate {
my ($z) = @_;
if ($z->{c_dirty}) {
my ($r, $t) = @{$z->polar};
return (ref $z)->emake($r, -$t);
}
my ($re, $im) = @{$z->cartesian};
return (ref $z)->make($re, -$im);
}
sub abs {
my ($z, $rho) = @_;
unless (ref $z) {
if (@_ == 2) {
$_[0] = $_[1];
} else {
return CORE::abs($z);
}
}
if (defined $rho) {
$z->{'polar'} = [ $rho, ${$z->polar}[1] ];
$z->{p_dirty} = 0;
$z->{c_dirty} = 1;
return $rho;
} else {
return ${$z->polar}[0];
}
}
sub _theta {
my $theta = $_[0];
if    ($$theta >   pi()) { $$theta -= pit2 }
elsif ($$theta <= -pi()) { $$theta += pit2 }
}
sub arg {
my ($z, $theta) = @_;
return $z unless ref $z;
if (defined $theta) {
_theta(\$theta);
$z->{'polar'} = [ ${$z->polar}[0], $theta ];
$z->{p_dirty} = 0;
$z->{c_dirty} = 1;
} else {
$theta = ${$z->polar}[1];
_theta(\$theta);
}
return $theta;
}
sub sqrt {
my ($z) = @_;
my ($re, $im) = ref $z ? @{$z->cartesian} : ($z, 0);
return $re < 0 ? cplx(0, CORE::sqrt(-$re)) : CORE::sqrt($re)
if $im == 0;
my ($r, $t) = @{$z->polar};
return (ref $z)->emake(CORE::sqrt($r), $t/2);
}
sub cbrt {
my ($z) = @_;
return $z < 0 ?
-CORE::exp(CORE::log(-$z)/3) :
($z > 0 ? CORE::exp(CORE::log($z)/3): 0)
unless ref $z;
my ($r, $t) = @{$z->polar};
return 0 if $r == 0;
return (ref $z)->emake(CORE::exp(CORE::log($r)/3), $t/3);
}
sub _rootbad {
my $mess = "Root $_[0] illegal, root rank must be positive integer.\n";
my @up = caller(1);
$mess .= "Died at $up[1] line $up[2].\n";
die $mess;
}
sub root {
my ($z, $n) = @_;
_rootbad($n) if ($n < 1 or int($n) != $n);
my ($r, $t) = ref $z ?
@{$z->polar} : (CORE::abs($z), $z >= 0 ? 0 : pi);
my @root;
my $k;
my $theta_inc = pit2 / $n;
my $rho = $r ** (1/$n);
my $theta;
my $cartesian = ref $z && $z->{c_dirty} == 0;
for ($k = 0, $theta = $t / $n; $k < $n; $k++, $theta += $theta_inc) {
my $w = cplxe($rho, $theta);
push @root, $cartesian ? cplx(@{$w->cartesian}) : $w;
}
return @root;
}
sub Re {
my ($z, $Re) = @_;
return $z unless ref $z;
if (defined $Re) {
$z->{'cartesian'} = [ $Re, ${$z->cartesian}[1] ];
$z->{c_dirty} = 0;
$z->{p_dirty} = 1;
} else {
return ${$z->cartesian}[0];
}
}
sub Im {
my ($z, $Im) = @_;
return 0 unless ref $z;
if (defined $Im) {
$z->{'cartesian'} = [ ${$z->cartesian}[0], $Im ];
$z->{c_dirty} = 0;
$z->{p_dirty} = 1;
} else {
return ${$z->cartesian}[1];
}
}
sub rho {
Math::Complex::abs(@_);
}
sub theta {
Math::Complex::arg(@_);
}
sub exp {
my ($z) = @_;
my ($x, $y) = @{$z->cartesian};
return (ref $z)->emake(CORE::exp($x), $y);
}
sub _logofzero {
my $mess = "$_[0]: Logarithm of zero.\n";
if (defined $_[1]) {
$mess .= "(Because in the definition of $_[0], the argument ";
$mess .= "$_[1] " unless ($_[1] eq '0');
$mess .= "is 0)\n";
}
my @up = caller(1);
$mess .= "Died at $up[1] line $up[2].\n";
die $mess;
}
sub log {
my ($z) = @_;
unless (ref $z) {
_logofzero("log") if $z == 0;
return $z > 0 ? CORE::log($z) : cplx(CORE::log(-$z), pi);
}
my ($r, $t) = @{$z->polar};
_logofzero("log") if $r == 0;
if    ($t >   pi()) { $t -= pit2 }
elsif ($t <= -pi()) { $t += pit2 }
return (ref $z)->make(CORE::log($r), $t);
}
sub ln { Math::Complex::log(@_) }
sub log10 {
return Math::Complex::log($_[0]) * uplog10;
}
