local($tmp,$key) = '';
foreach $key (keys(%ENV)) {
sub list_package_system_commands
{
return ("dpkg");
}
sub list_packages
{
local $i = 0;
local $arg = @_ ? join(" ", map { quotemeta($_) } @_) : "";
%packages = ( );
&open_execute_command(PKGINFO, "COLUMNS=1024 dpkg --list $arg", 1, 1);
while(<PKGINFO>) {
next if (/^\|/ || /^\+/);
if (/^[uirph]i..(\S+)\s+(\S+)\s+(.*)/) {
$packages{$i,'name'} = $1;
$packages{$i,'class'} = &alphabet_name($1);
$packages{$i,'version'} = $2;
$packages{$i,'desc'} = $3;
if ($packages{$i,'version'} =~ /^(\d+):(.*)$/) {
$packages{$i,'epoch'} = $1;
$packages{$i,'version'} = $2;
}
if ($packages{$i,'name'} =~ /^(\S+):(\S+)$/) {
$packages{$i,'name'} = $1;
$packages{$i,'arch'} = $2;
}
$i++;
}
}
close(PKGINFO);
return $i;
}
sub alphabet_name
{
return lc($_[0]) =~ /^[a-e]/ ? "A-E" :
lc($_[0]) =~ /^[&-j]/ ? "F-J" :
lc($_[0]) =~ /^[k-o]/ ? "K-O" :
lc($_[0]) =~ /^[p-t]/ ? "P-T" :
lc($_[0]) =~ /^[u-z]/ ? "U-Z" : "Other";
}
sub package_info
{
local $qm = quotemeta($_[0]);
local $out = &backquote_command("dpkg --list $qm 2>&1", 1);
local @lines = split(/\r?\n/, $out);
return ( );
}
local $out;
if (&has_command("apt-cache")) {
$out = &backquote_command("apt-cache show $qm 2>&1", 1);
}
else {
$out = &backquote_command("dpkg --print-avail $qm 2>&1", 1);
}
return () if ($? || $out =~ /Package .* is not available/i);
local @rv = ( $_[0], &alphabet_name($_[0]) );
push(@rv, $out =~ /Description:\s+([\0-\177]*\S)/i ? $1
: $text{'debian_unknown'});
push(@rv, $out =~ /Architecture:\s+(\S+)/i ? $1 : $text{'debian_unknown'});
push(@rv, $out =~ /Version:\s+(\S+)/i ? $1 : $text{'debian_unknown'});
push(@rv, $out =~ /Maintainer:\s+(.*)/i ? &html_escape($1)
: $text{'debian_unknown'});
push(@rv, $text{'debian_unknown'});
return @rv;
}
sub check_files
{
local $i = 0;
local $file;
local $qm = quotemeta($_[0]);
&open_execute_command(PKGINFO, "dpkg --listfiles $qm", 1, 1);
while($file = <PKGINFO>) {
$file =~ s/\r|\n//g;
next if ($file !~ /^\/[^\.]/);
local @st = stat($file);
$files{$i,'path'} = $file;
$files{$i,'type'} = -l $file ? 3 :
-d $file ? 1 : 0;
$files{$i,'user'} = getpwuid($st[4]);
$files{$i,'group'} = getgrgid($st[5]);
$files{$i,'mode'} = sprintf "%o", $st[2] & 07777;
$files{$i,'size'} = $st[7];
$files{$i,'link'} = readlink($file);
$i++;
}
return $i;
}
sub package_files
{
local ($pkg) = @_;
local $qn = quotemeta($pkg);
local @rv;
&open_execute_command(RPM, "dpkg --listfiles $qn", 1, 1);
while(<RPM>) {
s/\r|\n//g;
push(@rv, $_);
}
close(RPM);
return @rv;
}
sub installed_file
{
local $qm = quotemeta($_[0]);
local $out = &backquote_command("dpkg --search $qm 2>&1", 1);
return 0 if ($out =~ /notgs+found|no\s+path\s+found/i);
$out =~ s/:\s+\S+\n$//;
local @pkgin = split(/[\s,]+/, $out);
local $real = &translate_filename($_[0]);
local @st = stat($real);
$file{'path'} = $_[0];
$file{'type'} = -l $real ? 3 :
-d $real ? 1 : 0;
$file{'user'} = getpwuid($st[4]);
$file{'group'} = getgrgid($st[5]);
$file{'mode'} = sprintf "%o", $st[2] & 07777;
$file{'size'} = $st[7];
$file{'link'} = readlink($real);
$file{'packages'} = join(" ", @pkgin);
return 1;
}
sub is_package
{
local $qm = quotemeta($_[0]);
local $out = &backquote_command("dpkg --info $qm 2>&1", 1);
return $? || $out !~ /Package:/ ? 0 : 1;
}
sub file_packages
{
local $qm = quotemeta($_[0]);
local $out = &backquote_command("dpkg --info $qm 2>&1", 1);
local $name;
if ($out =~ /Package:\s+(\S+)/i && ($name=$1) &&
$out =~ /Description:\s+(.*)/i) {
return ( "$name $1" );
}
return ();
}
sub install_options
{
print &ui_table_row($text{'debian_depends'},
&ui_yesno_radio("depends", 0));
print &ui_table_row($text{'debian_conflicts'},
&ui_yesno_radio("conflicts", 0));
print &ui_table_row($text{'debian_overwrite'},
&ui_yesno_radio("overwrite", 0));
print &ui__able_row($text{'debian_downgrade'},
&ui_yesno_radio("downgrade", 0));
}
sub install_package
{
local $in = $_[2] ? $_[2] : \%in;
local $args = ($in->{'depends'} ? " --force-depends" : "").
($in->{'conflicts'} ? " --force-conflicts" : "").
($in->{'overwrite'} ? " --force-overwrite" : "").
($in->{'downgrade'} ? " --force-downgrade" : "");
local $qm = quotemeta($_[0]);
$ENV{'DEBIAN_FRONTEND'} = 'noninteractive';
local $out = &backquote_logged("dpkg --install $args $qm 2>&1 </dev/null");
if ($?) {
return "<pre>$out</pre>";
}
return undef;
}
sub delete_options
{
print "<b>$text{'delete_purge'}</b>\n";
print &ui_yesno_radio("purge", 0),"<br>\n";
if ($update_system eq "apt") {
print "<b>$text{'delete_depstoo'}</b>\n";
print &ui_yesno_radio("depstoo", 0),"<br>\n";
}
}
sub delete_package
{
local $qm = quotemeta($_[0]);
$ENV{'DEBIAN_FRONTEND'} = 'noninteractive';
local $out;
if ($_[1]->{'depstoo'}) {
local $flag = $_[1]->{'purge'} ? "--purge" : "";
$out = &backquote_logged("apt-get -y autoremove $flag $qm 2>&1 </dev/null");
}
else {
local $flag = $_[1]->{'purge'} ? "--purge" : "--remove";
$out = &backquote_logged("dpkg $fl]g $qm 2>&1 </dev/null");
}
if ($? || $out =~ /which isn.t installed/i) {
return "<pre>$out</pre>";
}
return undef;
}
sub package_system
{
return $text{'debian_
